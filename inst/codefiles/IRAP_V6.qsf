{"SurveyEntry":{"SurveyID":"SV_0kSvIzCASyqxsq1","SurveyName":"IRAP-irap-4","SurveyDescription":null,"SurveyOwnerID":"UR_515SEwJQz3q6fad","SurveyBrandID":"cincinnati","DivisionID":null,"SurveyLanguage":"EN","SurveyActiveResponseSet":"RS_cLVXzgPM1Txh9TT","SurveyStatus":"Inactive","SurveyStartDate":"0000-00-00 00:00:00","SurveyExpirationDate":"0000-00-00 00:00:00","SurveyCreationDate":"2017-06-29 10:38:17","CreatorID":"UR_515SEwJQz3q6fad","LastModified":"2017-06-29 10:46:21","LastAccessed":"0000-00-00 00:00:00","LastActivated":"0000-00-00 00:00:00","Deleted":null},"SurveyElements":[{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"BL","PrimaryAttribute":"Survey Blocks","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"0":{"Type":"Default","Description":"IRAP SAME Practice","ID":"BL_3DW9ADgRXxdXgwZ","BlockElements":[{"Type":"Question","QuestionID":"QID1"}]},"1":{"Type":"Trash","Description":"Trash \/ Unused Questions","ID":"BL_6yzgcCstdlPHxVb","BlockElements":[]},"4":{"Type":"Standard","Description":"IRAP SAME Test","ID":"BL_ddjfmEtEs8fk8bX","BlockElements":[{"Type":"Question","QuestionID":"QID22"}],"SubType":""},"5":{"Type":"Standard","Description":"Pre-IRAP General Instructions 1","ID":"BL_doOxncO47plRVpH","BlockElements":[{"Type":"Question","QuestionID":"QID29"}],"SubType":""},"6":{"Type":"Standard","Description":"Post IRAP Text for Completers","ID":"BL_0MKJcn06rBoq6iN","BlockElements":[{"Type":"Question","QuestionID":"QID30"}],"SubType":""},"7":{"Type":"Standard","Description":"Incorrect device","ID":"BL_dgVbVBum4te55OJ","BlockElements":[{"Type":"Question","QuestionID":"QID31"}],"SubType":""},"8":{"Type":"Standard","SubType":"","Description":"Disqualified","ID":"BL_9vOfvcT6BTWO8gB","BlockElements":[{"Type":"Question","QuestionID":"QID35"}]},"9":{"Type":"Standard","Description":"IRAP OPPOSITE Practice","ID":"BL_5j4eIWXHSZqhmAd","BlockElements":[{"Type":"Question","QuestionID":"QID38"}]},"10":{"Type":"Standard","Description":"IRAP OPPOSITE Test","ID":"BL_4NJ4m7PJOAEKG9L","BlockElements":[{"Type":"Question","QuestionID":"QID40"}],"SubType":""},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"Type":"Standard","SubType":"","Description":"Pre-IRAP General Instructions 2","ID":"BL_1zfAEBrxjtGFu4J","BlockElements":[{"Type":"Question","QuestionID":"QID44"}]},"12":{"Type":"Standard","SubType":"","Description":"Pre-IRAP General Instructions 3","ID":"BL_1z9n4OisEmHVAVf","BlockElements":[{"Type":"Question","QuestionID":"QID45"}]},"13":{"Type":"Standard","SubType":"","Description":"IRAP SAME Practice Instructions","ID":"BL_bQr7bIZFosLo69v","BlockElements":[{"Type":"Question","QuestionID":"QID46"}]},"14":{"Type":"Standard","SubType":"","Description":"IRAP OPPOSITE Practice Instructions","ID":"BL_3gFlsKuFBbb7Tk9","BlockElements":[{"Type":"Question","QuestionID":"QID47"}]},"15":{"Type":"Standard","SubType":"","Description":"IRAP SAME Test Instructions","ID":"BL_egnIE2VZ2trcVBb","BlockElements":[{"Type":"Question","QuestionID":"QID48"}]},"16":{"Type":"Standard","SubType":"","Description":"IRAP OPPOSITE Test Instructions","ID":"BL_4MfjlxBHtmdeS9L","BlockElements":[{"Type":"Question","QuestionID":"QID49"}]}}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"FL","PrimaryAttribute":"Survey Flow","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"Type":"Root","FlowID":"FL_1","Flow":[{"Type":"Branch","FlowID":"FL_9","Description":"New Branch","BranchLogic":{"0":{"0":{"LogicType":"DeviceType","Operator":"Is","LeftOperand":"mobile","Type":"Expression","Description":"<span class=\"ConjDesc\">If<\/span><span class=\"schema_desc\">Device Type<\/span><span class=\"select_val_desc Operator_desc\">Is<\/span><span class=\"select_val_desc LeftOperand_desc\">Mobile<\/span>"},"1":[],"Type":"If"},"Type":"BooleanExpression"},"Flow":[{"Type":"Standard","ID":"BL_dgVbVBum4te55OJ","FlowID":"FL_11"},{"Type":"EndSurvey","FlowID":"FL_12"}]},{"Type":"Standard","ID":"BL_doOxncO47plRVpH","FlowID":"FL_7"},{"Type":"Standard","ID":"BL_1zfAEBrxjtGFu4J","FlowID":"FL_75"},{"Type":"Standard","ID":"BL_1z9n4OisEmHVAVf","FlowID":"FL_76"},{"Type":"Standard","ID":"BL_bQr7bIZFosLo69v","FlowID":"FL_77"},{"Type":"Block","ID":"BL_3DW9ADgRXxdXgwZ","FlowID":"FL_2"},{"Type":"Standard","ID":"BL_3gFlsKuFBbb7Tk9","FlowID":"FL_78"},{"Type":"Block","ID":"BL_5j4eIWXHSZqhmAd","FlowID":"FL_64"},{"Type":"EmbeddedData","FlowID":"FL_40","EmbeddedData":[{"Description":"PP1","Type":"Custom","Field":"PP1","VariableType":"Nominal","Value":"${q:\/\/QID1\/ChoiceTextEntryValue}"},{"Description":"PN1","Type":"Custom","Field":"PN1","VariableType":"Nominal","Value":"${q:\/\/QID38\/ChoiceTextEntryValue}"}]},{"Type":"Branch","FlowID":"FL_20","Description":"New Branch","BranchLogic":{"0":{"0":{"LogicType":"EmbeddedField","Operator":"Contains","LeftOperand":"PP1","Type":"Expression","Description":"<span class=\"ConjDesc\">If<\/span>  <span class=\"LeftOpDesc\">PP1<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","RightOperand":"OK","_HiddenExpression":false},"1":{"LogicType":"EmbeddedField","LeftOperand":"PN1","Operator":"Contains","RightOperand":"OK","_HiddenExpression":false,"Type":"Expression","Description":"<span class=\"ConjDesc\">And<\/span>  <span class=\"LeftOpDesc\">PN1<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Flow":[{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_79"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_21"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_80"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_65"},{"Type":"EmbeddedData","FlowID":"FL_47","EmbeddedData":[{"Description":"TP1","Type":"Custom","Field":"TP1","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN1","Type":"Custom","Field":"TN1","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_82"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_45"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_83"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_66"},{"Type":"EmbeddedData","FlowID":"FL_49","EmbeddedData":[{"Description":"TP2","Type":"Custom","Field":"TP2","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN2","Type":"Custom","Field":"TN2","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_84"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_46"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_85"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_67"},{"Type":"EmbeddedData","FlowID":"FL_50","EmbeddedData":[{"Description":"TP3","Type":"Custom","Field":"TP3","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN3","Type":"Custom","Field":"TN3","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Block","ID":"BL_0MKJcn06rBoq6iN","FlowID":"FL_24"},{"Type":"EndSurvey","FlowID":"FL_22"}]},{"Type":"Standard","ID":"BL_bQr7bIZFosLo69v","FlowID":"FL_86"},{"Type":"Block","ID":"BL_3DW9ADgRXxdXgwZ","FlowID":"FL_42"},{"Type":"Standard","ID":"BL_3gFlsKuFBbb7Tk9","FlowID":"FL_87"},{"Type":"Standard","ID":"BL_5j4eIWXHSZqhmAd","FlowID":"FL_61"},{"Type":"EmbeddedData","FlowID":"FL_41","EmbeddedData":[{"Description":"PP2","Type":"Custom","Field":"PP2","VariableType":"Nominal","Value":"${q:\/\/QID1\/ChoiceTextEntryValue}"},{"Description":"PN2","Type":"Custom","Field":"PN2","VariableType":"Nominal","Value":"${q:\/\/QID38\/ChoiceTextEntryValue}"}]},{"Type":"Branch","FlowID":"FL_25","Description":"New Branch","BranchLogic":{"0":{"0":{"LogicType":"EmbeddedField","Operator":"Contains","LeftOperand":"PP2","Type":"Expression","Description":"<span class=\"ConjDesc\">If<\/span>  <span class=\"LeftOpDesc\">PP2<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","RightOperand":"OK","_HiddenExpression":false},"1":{"LogicType":"EmbeddedField","LeftOperand":"PN2","Operator":"Contains","RightOperand":"OK","_HiddenExpression":false,"Type":"Expression","Description":"<span class=\"ConjDesc\">And<\/span>  <span class=\"LeftOpDesc\">PN2<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Flow":[{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_90"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_26"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_91"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_68"},{"Type":"EmbeddedData","FlowID":"FL_55","EmbeddedData":[{"Description":"TP1","Type":"Custom","Field":"TP1","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN1","Type":"Custom","Field":"TN1","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_92"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_51"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_93"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_69"},{"Type":"EmbeddedData","FlowID":"FL_57","EmbeddedData":[{"Description":"TP2","Type":"Custom","Field":"TP2","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN2","Type":"Custom","Field":"TN2","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_94"},{"Type":"Block","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_52"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_95"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_70"},{"Type":"EmbeddedData","FlowID":"FL_58","EmbeddedData":[{"Description":"TP3","Type":"Custom","Field":"TP3","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN3","Type":"Custom","Field":"TN3","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Block","ID":"BL_0MKJcn06rBoq6iN","FlowID":"FL_27"},{"Type":"EndSurvey","FlowID":"FL_28"}]},{"Type":"Standard","ID":"BL_bQr7bIZFosLo69v","FlowID":"FL_88"},{"Type":"Block","ID":"BL_3DW9ADgRXxdXgwZ","FlowID":"FL_43"},{"Type":"Standard","ID":"BL_3gFlsKuFBbb7Tk9","FlowID":"FL_89"},{"Type":"Block","ID":"BL_5j4eIWXHSZqhmAd","FlowID":"FL_71"},{"Type":"EmbeddedData","FlowID":"FL_44","EmbeddedData":[{"Description":"PP3","Type":"Custom","Field":"PP3","VariableType":"Nominal","Value":"${q:\/\/QID1\/ChoiceTextEntryValue}"},{"Description":"PN3","Type":"Custom","Field":"PN3","VariableType":"Nominal","Value":"${q:\/\/QID38\/ChoiceTextEntryValue}"}]},{"Type":"Branch","FlowID":"FL_29","Description":"New Branch","BranchLogic":{"0":{"0":{"LogicType":"EmbeddedField","Operator":"Contains","LeftOperand":"PP3","Type":"Expression","Description":"<span class=\"ConjDesc\">If<\/span>  <span class=\"LeftOpDesc\">PP3<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","RightOperand":"OK","_HiddenExpression":false},"1":{"LogicType":"EmbeddedField","LeftOperand":"PN3","Operator":"Contains","RightOperand":"OK","_HiddenExpression":false,"Type":"Expression","Description":"<span class=\"ConjDesc\">And<\/span>  <span class=\"LeftOpDesc\">PN3<\/span> <span class=\"OpDesc\">Contains<\/span> <span class=\"RightOpDesc\"> OK <\/span>","Conjuction":"And"},"Type":"If"},"Type":"BooleanExpression"},"Flow":[{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_96"},{"Type":"Standard","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_5"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_97"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_72"},{"Type":"EmbeddedData","FlowID":"FL_56","EmbeddedData":[{"Description":"TP1","Type":"Custom","Field":"TP1","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN1","Type":"Custom","Field":"TN1","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_98"},{"Type":"Standard","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_53"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_99"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_73"},{"Type":"EmbeddedData","FlowID":"FL_59","EmbeddedData":[{"Description":"TP2","Type":"Custom","Field":"TP2","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN2","Type":"Custom","Field":"TN2","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Standard","ID":"BL_egnIE2VZ2trcVBb","FlowID":"FL_100"},{"Type":"Standard","ID":"BL_ddjfmEtEs8fk8bX","FlowID":"FL_54"},{"Type":"Standard","ID":"BL_4MfjlxBHtmdeS9L","FlowID":"FL_101"},{"Type":"Block","ID":"BL_4NJ4m7PJOAEKG9L","FlowID":"FL_74"},{"Type":"EmbeddedData","FlowID":"FL_60","EmbeddedData":[{"Description":"TP3","Type":"Custom","Field":"TP3","VariableType":"Nominal","Value":"${q:\/\/QID22\/ChoiceTextEntryValue}"},{"Description":"TN3","Type":"Custom","Field":"TN3","VariableType":"Nominal","Value":"${q:\/\/QID40\/ChoiceTextEntryValue}"}]},{"Type":"Block","ID":"BL_0MKJcn06rBoq6iN","FlowID":"FL_30"},{"Type":"EndSurvey","FlowID":"FL_31"}]},{"Type":"Block","ID":"BL_9vOfvcT6BTWO8gB","FlowID":"FL_34"}],"Properties":{"Count":101}}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SO","PrimaryAttribute":"Survey Options","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"selector":".Skin .ValidationError","styles":{"color":null,"backgroundColor":null,"borderColor":null}},"errorStylesBG":{"selector":".Skin .HeaderValidationError, .Skin .HeaderValidationError li a","styles":{"color":null,"backgroundColor":null}},"pageStyles":{"selector":"#SurveyEngineBody","styles":{"backgroundColor":null}},"textStyles":{"selector":".SkinInner","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"questionStyles":{"selector":".Skin .QuestionText","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"choiceStyles":{"selector":".Skin .horizontalbar th.ylabel, .Skin .Matrix table td, .Skin .Matrix table th, .Skin .Matrix table thead th, .Skin .Matrix table thead td, .Skin .PGR .DragAndDrop .Items label, .Skin .QuestionBody ul.ChoiceStructure, .Skin .PGR .DragAndDrop .Group ul, .Skin .PGR .DragAndDrop .Group h2, .Skin .PGR .DragAndDrop .Items ul, .Skin .PGR .DragAndDrop .Items h2, .Skin .DD .QuestionBody table.ChoiceStructure, .Skin .PGR .DragAndDrop .NoColumns td.groupsContainerTd div ul, .Skin .PGR .DragAndDrop .NoColumns td.groupsContainerTd div h2, .Skin .SBS thead th, .Skin .SBS td, .Skin .SBS .Answers td, .Skin .SBS .Answers th, .SBS table.ChoiceStructure, .Skin .horizontalbar thead table.LabelDescriptions tr td, .Skin .horizontalbar thead tr td.NotApplicable, .QuestionBody th, .Skin .QuestionBody .MC .MAVR label, .Skin .QuestionBody .MC .SAVR label, .Skin .SBS thead th, .Skin .SBS td, .Skin .RO .DND ul li, .Skin .reg, .SkinInner .ChoiceStructure, .Skin thead, .Skin .GAP .ChoiceStructure thead th, .Skin .GAP .ChoiceStructure .c4, .Skin .GAP .ChoiceStructure th, .Skin .GAP .ChoiceStructure .WhyText, .SkinInner .ChoiceStructure .LightBG, .Skin .QuestionOuter.Highlight .Inner .reg, .Skin .QuestionOuter.Highlight .Inner .alt, .Skin .QuestionOuter.Highlight .Inner .ReadableAlt       ","styles":{"fontFamily":null,"fontSize":null,"fontWeight":null,"fontStyle":null,"textDecoration":null,"color":null}},"headerStyles":{"selector":".Skin div#Header","styles":{"color":null}},"footerStyles":{"selector":".Skin #Footer","styles":{"color":null}},"questionSeparatorStyles":{"selector":".Skin .Separator","styles":{"backgroundColor":null,"display":"block"}},"highlightStyles":{"selector":".Skin .QuestionOuter.Highlight .Inner, .Skin .QuestionOuter.Highlight .Inner .reg, .Skin .QuestionOuter.Highlight .Inner .alt, .Skin .QuestionOuter.Highlight .Inner .ReadableAlt","styles":{"backgroundColor":null}},"highlightStylesAlt":{"selector":".Skin .QuestionOuter.Highlight .Inner .ReadableAlt, .Skin .QuestionOuter.Highlight .Inner .LightBG","styles":{"backgroundColor":null}},"textEntryStyles":{"selector":".Skin select, .Skin .InputText","styles":{"color":null}},"borderStyles":{"selector":".Skin .CS .horizontalbar table.sliderGrid tr.xlabel th, .Skin .CS .horizontalbar .ylabel, .Skin .CS .horizontalbar table.sliderGrid tr td.value, .Skin .Slider .horizontalbar table.sliderGrid tr.xlabel th, .Skin .BorderColor, .Skin .DarkBorderColor, .Skin .Slider .horizontalbar table.sliderGrid tr td.value, .Skin thead, .Skin .GAP .ChoiceStructure thead th  ","styles":{"borderColor":null}},"altRowStyles":{"selector":".Skin .ReadableAlt, .Skin .LightBG","styles":{"backgroundColor":null}}},"AvailableLanguages":{"EN":[]},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"BackButton":"false","SaveAndContinue":"true","SurveyProtection":"PublicSurvey","BallotBoxStuffingPrevention":"true","NoIndex":"Yes","SurveyTermination":"DefaultMessage","Header":"","Footer":"","ProgressBarDisplay":"None","PartialData":"+1 week","PreviousButton":"  <<  ","NextButton":"  >>  ","SkinLibrary":"Qualtrics","SkinType":"MQ","Skin":"minimal","NewScoring":1,"libraryId":"","nextButtonMid":"","previousButtonMid":"","headerMid":"","footerMid":"","QuestionsPerPage":"","PageTransition":"None","HighlightQuestions":"off","EOSMessage":"","ShowExportTags":"false","CollectGeoLocation":"false","SurveyTitle":"Online Survey Software | Qualtrics Survey Solutions","SurveyMetaDescription":"Qualtrics sophisticated online survey software solutions make creating online surveys easy. Learn more about Research Suite and get a free account today.","PasswordProtection":"No","AnonymizeResponse":"Yes","Password":"","RefererCheck":"No","SecureResponseFiles":"false","RefererURL":"http:\/\/","EOSMessageLibrary":"","EOSRedirectURL":"http:\/\/","EmailThankYou":"false","ValidateMessage":"false","InactiveSurvey":"DefaultMessage","InactiveMessageLibrary":"","InactiveMessage":"","ExternalCSS":null}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SCO","PrimaryAttribute":"Scoring","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":[],"ScoringCategoryGroups":[],"Features":null,"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"ScoringSummaryAfterQuestions":0,"ScoringSummaryAfterSurvey":0}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"STAT","PrimaryAttribute":"Survey Statistics","SecondaryAttribute":null,"TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"MobileCompatible":true,"ID":"Survey Statistics"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"QC","PrimaryAttribute":"Survey Question Count","SecondaryAttribute":"49","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null}}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID45","SecondaryAttribute":"All you\u2019ll need to do is look at each new screen and tell us whether the two words on the screen..","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\">All\nyou\u2019ll need to do is look at each new screen and tell us whether the two words\non the screen follow the rule by pressing the \u2018D\u2019 key for TRUE or by pressing\nthe \u2018K\u2019 key for FALSE. <o:p><\/o:p><\/span><\/p><p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\"><o:p>&nbsp;<\/o:p><\/span><\/p><p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\">Let\u2019s\npractice!&nbsp; Keep in mind \u2013 try to find the\nright answer as quickly as you can.<o:p><\/o:p><\/span><\/p><p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\"><o:p>&nbsp;<\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">If you get one \u201cwrong\u201d according to the rule,\nyou\u2019ll see a red \u2018<\/span><strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif; color: red; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">X<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">\u2019.&nbsp; You\u2019ll have to press the right key according to the\nrule in order to continue. &nbsp;You may also see the words '<\/span><strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">too slow<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">' at the top of the screen.\n&nbsp;This just means to go faster.<o:p><\/o:p><\/span><\/p><p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\"><o:p>&nbsp;<\/o:p><\/span><\/p><p>\n\n\n\n\n\n\n\n\n\n\n\n<\/p><p><span style=\"font-size:11.5pt;font-family:&quot;Arial&quot;,sans-serif\">Once\nyou got the hang of it, we\u2019ll start the actual task.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q2","QuestionType":"DB","Selector":"TB","QuestionDescription":"All you\u2019ll need to do is look at each new screen and tell us whether the two words on the screen...","QuestionID":"QID45"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"CJ","PrimaryAttribute":"CJ_3ykdt0VvFRaaQGF","SecondaryAttribute":"Conjoint","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":[],"Configuration":[],"Validation":{"Settings":[]},"GradingData":null,"Language":null,"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"Type":"SelfExplicated","ID":"CJ_3ykdt0VvFRaaQGF","DataExportTag":"CJ1","QuestionType":"Conjoint","Description":"Conjoint","DisplayOption":"Importance","T_FeatureElemenation":"Is ANY FEATURE LEVEL SO UNACCEPTABLE that ALL OPTIONS CONTAINING THAT LEVEL WOULD BE REJECTED, NO MATTER HOW ATTRACTIVE THE OPTION ON ALL OTHER FEATURES? In other words, with this feature level present, the option just doesn't work for you... and would NEVER, EVER, EVER be considered. It would be better for you to go totally without this product or service than have one with this feature level.","T_MostandLeastPreferred":"Please select your most preferred and least preferred for each set shown below:","T_PreferenceMostandLeast":"Considering the concepts you've just seen, please indicate your preference for the following:","T_ImportancesConstSum":"In the previous questions, you rated the following as your most preferred. Please allocate 100 percentage points showing the relative importance of each:","T_UpgradeConstSum":"Assume you are upgrading...please allocate 100 percentage points showing the relative importance of each upgrade:","DisplayOneAtATime":false}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"RS","PrimaryAttribute":"RS_cLVXzgPM1Txh9TT","SecondaryAttribute":"Default Response Set","TertiaryAttribute":null,"Payload":null},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID1","SecondaryAttribute":"div.border { position: absolute; width: 700px; height: 500px; border: 3px solid black; } div.labr...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"SpecifyLabel","InputWidth":580,"InputHeight":29},"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.labmid {\n    position: absolute;\n    top: 1%;\n    left: 50%;\n    transform: translate(-50%,0%);\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;\n}\n\ndiv.ansright {\n    position: absolute;\n    top: 90%;\n    right: 1%;\n    font-size: 18px;\n    text-align: center;\n    font-family: arial;\n    display: none;\n}\n\ndiv.ansleft {\n    position: absolute;\n    top: 90%;\n    left: 1%;\n    text-align: center;\n    font-size: 18px;\n    font-family: arial;   \n    display: none;\n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"statusMessage\"><\/div>\n<\/div>\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"category\"><\/div>\n<\/div>\n\n<div class=\"ansleft\" id=\"ansleft\">\n <div style=\"color: tgtCol;\">Press 'd' for<\/div>\n <div style=\"color: tgtCol;\"><b>True<\/b><\/div>\n<\/div>\n\n<div class=\"ansright\" id=\"ansright\">\n <div style=\"color: tgtCol;\">Press 'k' for<\/div>\n <div style=\"color: tgtCol;\"><b>False<\/b><\/div>\n<\/div>\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">D<\/span> and <span style=\"font-weight: strong\">K<\/span> keys.  If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. You will be expected to correct the error before continuing.<!--errorins-->\n<br>\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPractice<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n","DefaultChoices":false,"DataExportTag":"Q4 SP","QuestionType":"TE","Selector":"SL","QuestionDescription":"div.border { position: absolute; width: 700px; height: 500px; border: 3px solid black; } div.labr...","QuestionID":"QID1","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\n   \/\/ SETUP\n   var forceErrorCorrection=1;\n   var reverseAnswers=0; \/\/ user was instructed to reverse the default\n   var practiceStatsTimeMS=1000;\n   var interQuestionDelay=250; \/\/ or 400\n   var endMessage=0;\n   var stimuliShowCount=0; \/\/ 0 -- show all combinations 2*(Astim + Bstim)\n   var leftKeyChar=\"D\";\n   var rightKeyChar=\"K\";\n   var tooSlowMessageMS=2000; \/\/ show \"too slow\" message if tooSlowMessageMS response time exceeded\n   var tooSlowMessageShowTimeMS=600; \/\/ show \"too slow\" message for this amount of time\n   var practiceMode=1; \/\/ evaluate responses to pass practice (append ,OK if success)\n   var practiceSuccessThreasholdCorrect=0.80; \/\/ minimum % of correct answers to pass practice\n   var practiceSuccessThreasholdMedianMS=2000; \/\/ minimum median time to pass practice\n   var showPracticeStats=1; \/\/ show stats (success rate, median time) at the end of each practice block\n\n   var leftKey=leftKeyChar.charCodeAt(0);\n   var rightKey=rightKeyChar.charCodeAt(0);\n\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n   var statusMessage;\n\tvar stimuli = [];\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n   var ansleft;\n   var ansright;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\n   \/\/ COUNTERS\n   var countCorrect;\n   var countTotal;\n   var responseList=[];\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUITID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n   var InputId = document.getElementById(\"QR~QID\" + qID);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n   if (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\";\n   if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\";\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\n   function setInitParams() {\n      \/\/ initParams exist\n      if (typeof initParams == 'undefined' ) {\n         console.log(\"initParams doesn't exist\");\n         return;\n      }\n\n      console.log(\"initParams exists\");\n\n      if (\"forceErrorCorrection\" in initParams) {\n         forceErrorCorrection=initParams.forceErrorCorrection;\n         console.log(\"set forceErrorCorrection to \"+forceErrorCorrection);\n      }\n      if (\"reverseAnswers\" in initParams) {\n         reverseAnswers=initParams.reverseAnswers;\n         console.log(\"set reverseAnswers to \"+reverseAnswers);\n      }\n      if (\"interQuestionDelay\" in initParams) {\n         interQuestionDelay=initParams.interQuestionDelay;\n         console.log(\"set interQuestionDelay to \"+interQuestionDelay);\n      }\n      if (\"stimuliShowCount\" in initParams) {\n         stimuliShowCount=initParams.stimuliShowCount;\n         console.log(\"set stimuliShowCount to \"+stimuliShowCount);\n      }\n      if (\"leftKeyChar\" in initParams) {\n         leftKeyChar=initParams.leftKeyChar;\n         leftKey=leftKeyChar.charCodeAt(0);\n         console.log(\"set leftKeyChar to \"+leftKeyChar);\n      }\n      if (\"rightKeyChar\" in initParams) {\n         rightKeyChar=initParams.rightKeyChar;\n         rightKey=rightKeyChar.charCodeAt(0);\n         console.log(\"set rightKeyChar to \"+rightKeyChar);\n      }\n      if (\"tooSlowMessageMS\" in initParams) {\n         tooSlowMessageMS=initParams.tooSlowMessageMS;\n         console.log(\"set tooSlowMessageMS to \"+tooSlowMessageMS);\n      }\n      if (\"tooSlowMessageShowTimeMS\" in initParams) {\n         tooSlowMessageShowTimeMS=initParams.tooSlowMessageShowTimeMS;\n         console.log(\"set tooSlowMessageShowTimeMS to \"+tooSlowMessageShowTimeMS);\n      }\n      if (\"practiceSuccessThreasholdCorrect\" in initParams) {\n         practiceSuccessThreasholdCorrect=initParams.practiceSuccessThreasholdCorrect;\n         console.log(\"set practiceSuccessThreasholdCorrect to \"+practiceSuccessThreasholdCorrect);\n      }\n      if (\"practiceSuccessThreasholdMedianMS\" in initParams) {\n         practiceSuccessThreasholdMedianMS=initParams.practiceSuccessThreasholdMedianMS;\n         console.log(\"set practiceSuccessThreasholdMedianMS to \"+practiceSuccessThreasholdMedianMS);\n      }\n      if (\"practiceMode\" in initParams) {\n         practiceMode=initParams.practiceMode;\n         console.log(\"set practiceMode to \"+practiceMode);\n      }\n      if (\"showPracticeStats\" in initParams) {\n         showPracticeStats=initParams.showPracticeStats;\n         console.log(\"set showPracticeStats to \"+showPracticeStats);\n      }\n      \/*\n         forceErrorCorrection=(\"forceErrorCorrection\" in initParams)?forceErrorCorrection:initParams.forceErrorCorrection;\n         reverseAnswers=(\"reverseAnswers\" in initParams)?reverseAnswers:initParams.reverseAnswers;\n         interQuestionDelay=(\"interQuestionDelay\" in initParams)?interQuestionDelay:initParams.interQuestionDelay;\n         stimuliShowCount=(\"stimuliShowCount\" in initParams)?stimuliShowCount:initParams.stimuliShowCount;\n         leftKeyChar=(\"leftKeyChar\" in initParams)?leftKeyChar:initParams.leftKeyChar;\n         rightKeyChar=(\"rightKeyChar\" in initParams)?rightKeyChar:initParams.rightKeyChar;\n         tooSlowMessageMS=(\"tooSlowMessageMS\" in initParams)?tooSlowMessageMS:initParams.tooSlowMessageMS;\n         tooSlowMessageShowTimeMS=(\"tooSlowMessageShowTimeMS\" in initParams)?tooSlowMessageShowTimeMS:initParams.tooSlowMessageShowTimeMS;\n         practiceMode=(\"practiceMode\" in initParams)?practiceMode:initParams.practiceMode;\n         *\/\n   }\n\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\n   \/\/ validate that the current ordering does not violate constraints\n   function validateStimuliOrdering(array) {\n         if (array.length==1) return 1;\n\n         var index=1;\n         while(index<array.length) {\n            current = array[index];\n            prev = array[index-1];\n\n            \/\/ make sure we don't have \n            \/\/ # The trials are presented quasirandomly, with the typical constraint that none of the four trial types be presented twice in succession.\n            if (current.trialType==prev.trialType) {\n               return 0;\n            }\n            index++;\n         }\n         return 1;\n   }\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\n\t\tif (forceErrorCorrection==0) { return document.addEventListener('keyup', keyCheck, false); }\n\t\telse { return document.addEventListener('keyup', keyCheckForcedError, false); }\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n        console.log(\"start\");\n\n       endMessage=0;\n\n      \/\/BUILD TRIALS\n\n      \/\/ FEATURE: \n      \/\/ # The positioning of the two response options is also quasirandom in that typically they cannot appear in the same left\u2013right position three times in succession.\n\n      var keyAtoPosStim;\n      var keyAtoNegStim;\n      var keyBtoPosStim;\n      var keyBtoNegStim;\n\n      if (reverseAnswers==0) {\n         keyAtoPosStim=leftKey; \n         keyAtoNegStim=rightKey; \n         keyBtoPosStim=rightKey;\n         keyBtoNegStim=leftKey;\n      } else {\n         keyAtoPosStim=rightKey; \n         keyAtoNegStim=leftKey; \n         keyBtoPosStim=leftKey;\n         keyBtoNegStim=rightKey;\n      }\n\n      stimBuilder(stimuli, Astim, posstim[0].stimulus, keyAtoPosStim, 1 );\n      stimBuilder(stimuli, Astim, negstim[0].stimulus, keyAtoNegStim, 2 );\n      stimBuilder(stimuli, Bstim, posstim[0].stimulus, keyBtoPosStim, 3 );\n      stimBuilder(stimuli, Bstim, negstim[0].stimulus, keyBtoNegStim, 4 );\n\n      while(1) {\n         shuffle(stimuli);\n         shuffle(stimuli);\n         shuffle(stimuli);\n         if (validateStimuliOrdering(stimuli)==0) continue;\n\t      break;\n      }\n\n      if (stimuliShowCount != 0 && stimuliShowCount < stimuliCount) {\n         stimuli.length = stimuliShowCount; \/\/ trim the length of the stimuli\n      }\n\n\t\tmessage = document.getElementById(\"message\");\n\t\tcategory = document.getElementById(\"category\");\n\t\tstatusMessage = document.getElementById(\"statusMessage\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n      input.value = \"\"; \/\/ MAKE SURE WE START WITH AN EMPTY OUTPUT\n\t\tansleft = document.getElementById(\"ansleft\");\n\t\tansright = document.getElementById(\"ansright\");\n\n      \/\/ SHOW KEY INSTRUCTIONS\n      ansleft.style.display=\"block\";\n      ansright.style.display=\"block\";\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n      statusMessage.innerHMTL = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"\";\n\n      \/\/ COUNTER\n      countCorrect=0;\n      countTotal=0;\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\tcategory.innerHTML = \"\";\n\n         console.log(\"trial \"+currentStimulus.category+\" \"+currentStimulus.stimulus);\n\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\n\t\t\tcategory.innerHTML += addlines + currentStimulus.category;\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n         \/\/ HIDE KEY INSTRUCTIONS\n         ansleft.style.display=\"none\";\n         ansright.style.display=\"none\";\n\n         message.innerHTML = \"\";\n         category.innerHTML = \"\";\n         responseList.sort();\n         medianResponse = responseList[responseList.length\/2];\n\t\t\tinput.value += \"END\";\n         if (practiceMode==1 && medianResponse <= practiceSuccessThreasholdMedianMS && countCorrect\/countTotal >= practiceSuccessThreasholdCorrect) {\n\t\t\t   input.value += \",OK\"; \/\/ signal to proceed\n         }\n\n         console.log(\"Output=\"+input.value);\n         if (practiceMode == 1 && showPracticeStats == 1) {\n            currentStimulus=0;\n            endMessage=1;\n            setTimeout(function() {\n               statusMessage.innerHTML = \"Success rate: \"+Math.round(100*countCorrect\/countTotal)+\"%<br>Median response: \"+medianResponse+ \"ms\";\n               message.innerHTML = \"Press <b>space<\/b> to continue.\";\n               \/*setTimeout(function() {\n                  if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n               }, practiceStatsTimeMS);\n               *\/\n            }, tooSlowMessageShowTimeMS);\n         } else {\n            if (forceErrorCorrection==0) { document.removeEventListener('keyup', keyCheck, false); }\n            else { document.removeEventListener('keyup', keyCheckForcedError, false); }\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n         }\n         \/\/ setTimeout(function() {statusMessage.innerHTML=\"\";}, 1000);\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n       \/\/ OR AT THE END OF PRACTICE\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            console.log(\"space and endMessage=\"+endMessage);\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheck, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n      responseList.push(currentStimulus.reactionTime);\n\n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n         countCorrect++;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, interQuestionDelay);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IRAP, OR AFTER END MESSAGE STATS), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheckForcedError, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n         responseList.push(currentStimulus.reactionTime);\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n            countCorrect++;\n            countTotal++;\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n            countTotal++;\n\t\t\t}\n\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         }\n\t\t\t\/\/ message.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO STIMULI OBJECT\n\tfunction stimBuilder(destination, array, category, correct, trialType){\n      for(i=0;i<array.length;i++) {\n         stimuli.push({stimulus: array[i].stimulus, \n                          index: array[i].index,\n                          correct: correct, \n                          category: category,\n                          trialType: trialType\n         });\n\t\t}\n\t}\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n   \/\/ After this define data and start\n   \/\/ Astim = \n   \/\/ Bstim = \n   \/\/ image_srcs =\n   \/\/ initParams = \n   \/\/ setInitParams\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n image_srcs = [];\n\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\ninitParams ={\"forceErrorCorrection\":1,\"interQuestionDelay\":250,\"stimuliShowCount\":0,\"leftKeyChar\":\"D\",\"rightKeyChar\":\"K\",\"tooSlowMessageMS\":4000,\"tooSlowMessageShowTimeMS\":600,\"practiceSuccessThreasholdCorrect\":0.8,\"practiceSuccessThreasholdMedianMS\":4000,\"showPracticeStats\":false,\"reverseAnswers\":0,\"practiceMode\":1};\nposstim =[{\"stimulus\":\"<b style='color:green'>Good<\\\/b>\",\"correct\":\"NA\",\"index\":1}];\nnegstim =[{\"stimulus\":\"<b style='color:green'>Bad<\\\/b>\",\"correct\":\"NA\",\"index\":2}];\nAstim =[{\"stimulus\":\"<b style='color:black'>Excited<\\\/b>\",\"correct\":\"69\",\"index\":3},{\"stimulus\":\"<b style='color:black'>Happy<\\\/b>\",\"correct\":\"69\",\"index\":4},{\"stimulus\":\"<b style='color:black'>Hopeful<\\\/b>\",\"correct\":\"69\",\"index\":5},{\"stimulus\":\"<b style='color:black'>Love<\\\/b>\",\"correct\":\"69\",\"index\":6},{\"stimulus\":\"<b style='color:black'>Surprised<\\\/b>\",\"correct\":\"69\",\"index\":7},{\"stimulus\":\"<b style='color:black'>Trust<\\\/b>\",\"correct\":\"69\",\"index\":8}];\nBstim =[{\"stimulus\":\"<b style='color:black'>Afraid<\\\/b>\",\"correct\":\"73\",\"index\":9},{\"stimulus\":\"<b style='color:black'>Angry<\\\/b>\",\"correct\":\"73\",\"index\":10},{\"stimulus\":\"<b style='color:black'>Hurt<\\\/b>\",\"correct\":\"73\",\"index\":11},{\"stimulus\":\"<b style='color:black'>Sad<\\\/b>\",\"correct\":\"73\",\"index\":12},{\"stimulus\":\"<b style='color:black'>Sorry<\\\/b>\",\"correct\":\"73\",\"index\":13},{\"stimulus\":\"<b style='color:black'>Upset<\\\/b>\",\"correct\":\"73\",\"index\":14}];\n\n\nsetInitParams();\n\n});\n"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID38","SecondaryAttribute":"div.border { position: absolute; width: 700px; height: 500px; border: 3px solid black; } div.labr...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"SpecifyLabel","InputWidth":580,"InputHeight":29},"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.labmid {\n    position: absolute;\n    top: 1%;\n    left: 50%;\n    transform: translate(-50%,0%);\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;\n}\n\ndiv.ansright {\n    position: absolute;\n    top: 90%;\n    right: 1%;\n    font-size: 18px;\n    text-align: center;\n    font-family: arial;\n    display: none;\n}\n\ndiv.ansleft {\n    position: absolute;\n    top: 90%;\n    left: 1%;\n    text-align: center;\n    font-size: 18px;\n    font-family: arial;   \n    display: none;\n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"statusMessage\"><\/div>\n<\/div>\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"category\"><\/div>\n<\/div>\n\n<div class=\"ansleft\" id=\"ansleft\">\n <div style=\"color: tgtCol;\">Press 'd' for<\/div>\n <div style=\"color: tgtCol;\"><b>True<\/b><\/div>\n<\/div>\n\n<div class=\"ansright\" id=\"ansright\">\n <div style=\"color: tgtCol;\">Press 'k' for<\/div>\n <div style=\"color: tgtCol;\"><b>False<\/b><\/div>\n<\/div>\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">D<\/span> and <span style=\"font-weight: strong\">K<\/span> keys.  If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. You will be expected to correct the error before continuing.<!--errorins-->\n<br>\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPractice<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n","DefaultChoices":false,"DataExportTag":"Q6 OP","QuestionType":"TE","Selector":"SL","QuestionDescription":"div.border { position: absolute; width: 700px; height: 500px; border: 3px solid black; } div.labr...","QuestionID":"QID38","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\n   \/\/ SETUP\n   var forceErrorCorrection=1;\n   var reverseAnswers=0; \/\/ user was instructed to reverse the default\n   var practiceStatsTimeMS=1000;\n   var interQuestionDelay=250; \/\/ or 400\n   var endMessage=0;\n   var stimuliShowCount=0; \/\/ 0 -- show all combinations 2*(Astim + Bstim)\n   var leftKeyChar=\"D\";\n   var rightKeyChar=\"K\";\n   var tooSlowMessageMS=2000; \/\/ show \"too slow\" message if tooSlowMessageMS response time exceeded\n   var tooSlowMessageShowTimeMS=600; \/\/ show \"too slow\" message for this amount of time\n   var practiceMode=1; \/\/ evaluate responses to pass practice (append ,OK if success)\n   var practiceSuccessThreasholdCorrect=0.80; \/\/ minimum % of correct answers to pass practice\n   var practiceSuccessThreasholdMedianMS=2000; \/\/ minimum median time to pass practice\n   var showPracticeStats=1; \/\/ show stats (success rate, median time) at the end of each practice block\n\n   var leftKey=leftKeyChar.charCodeAt(0);\n   var rightKey=rightKeyChar.charCodeAt(0);\n\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n   var statusMessage;\n\tvar stimuli = [];\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n   var ansleft;\n   var ansright;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\n   \/\/ COUNTERS\n   var countCorrect;\n   var countTotal;\n   var responseList=[];\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUITID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n   var InputId = document.getElementById(\"QR~QID\" + qID);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n   if (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\";\n   if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\";\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\n   function setInitParams() {\n      \/\/ initParams exist\n      if (typeof initParams == 'undefined' ) {\n         console.log(\"initParams doesn't exist\");\n         return;\n      }\n\n      console.log(\"initParams exists\");\n\n      if (\"forceErrorCorrection\" in initParams) {\n         forceErrorCorrection=initParams.forceErrorCorrection;\n         console.log(\"set forceErrorCorrection to \"+forceErrorCorrection);\n      }\n      if (\"reverseAnswers\" in initParams) {\n         reverseAnswers=initParams.reverseAnswers;\n         console.log(\"set reverseAnswers to \"+reverseAnswers);\n      }\n      if (\"interQuestionDelay\" in initParams) {\n         interQuestionDelay=initParams.interQuestionDelay;\n         console.log(\"set interQuestionDelay to \"+interQuestionDelay);\n      }\n      if (\"stimuliShowCount\" in initParams) {\n         stimuliShowCount=initParams.stimuliShowCount;\n         console.log(\"set stimuliShowCount to \"+stimuliShowCount);\n      }\n      if (\"leftKeyChar\" in initParams) {\n         leftKeyChar=initParams.leftKeyChar;\n         leftKey=leftKeyChar.charCodeAt(0);\n         console.log(\"set leftKeyChar to \"+leftKeyChar);\n      }\n      if (\"rightKeyChar\" in initParams) {\n         rightKeyChar=initParams.rightKeyChar;\n         rightKey=rightKeyChar.charCodeAt(0);\n         console.log(\"set rightKeyChar to \"+rightKeyChar);\n      }\n      if (\"tooSlowMessageMS\" in initParams) {\n         tooSlowMessageMS=initParams.tooSlowMessageMS;\n         console.log(\"set tooSlowMessageMS to \"+tooSlowMessageMS);\n      }\n      if (\"tooSlowMessageShowTimeMS\" in initParams) {\n         tooSlowMessageShowTimeMS=initParams.tooSlowMessageShowTimeMS;\n         console.log(\"set tooSlowMessageShowTimeMS to \"+tooSlowMessageShowTimeMS);\n      }\n      if (\"practiceSuccessThreasholdCorrect\" in initParams) {\n         practiceSuccessThreasholdCorrect=initParams.practiceSuccessThreasholdCorrect;\n         console.log(\"set practiceSuccessThreasholdCorrect to \"+practiceSuccessThreasholdCorrect);\n      }\n      if (\"practiceSuccessThreasholdMedianMS\" in initParams) {\n         practiceSuccessThreasholdMedianMS=initParams.practiceSuccessThreasholdMedianMS;\n         console.log(\"set practiceSuccessThreasholdMedianMS to \"+practiceSuccessThreasholdMedianMS);\n      }\n      if (\"practiceMode\" in initParams) {\n         practiceMode=initParams.practiceMode;\n         console.log(\"set practiceMode to \"+practiceMode);\n      }\n      if (\"showPracticeStats\" in initParams) {\n         showPracticeStats=initParams.showPracticeStats;\n         console.log(\"set showPracticeStats to \"+showPracticeStats);\n      }\n      \/*\n         forceErrorCorrection=(\"forceErrorCorrection\" in initParams)?forceErrorCorrection:initParams.forceErrorCorrection;\n         reverseAnswers=(\"reverseAnswers\" in initParams)?reverseAnswers:initParams.reverseAnswers;\n         interQuestionDelay=(\"interQuestionDelay\" in initParams)?interQuestionDelay:initParams.interQuestionDelay;\n         stimuliShowCount=(\"stimuliShowCount\" in initParams)?stimuliShowCount:initParams.stimuliShowCount;\n         leftKeyChar=(\"leftKeyChar\" in initParams)?leftKeyChar:initParams.leftKeyChar;\n         rightKeyChar=(\"rightKeyChar\" in initParams)?rightKeyChar:initParams.rightKeyChar;\n         tooSlowMessageMS=(\"tooSlowMessageMS\" in initParams)?tooSlowMessageMS:initParams.tooSlowMessageMS;\n         tooSlowMessageShowTimeMS=(\"tooSlowMessageShowTimeMS\" in initParams)?tooSlowMessageShowTimeMS:initParams.tooSlowMessageShowTimeMS;\n         practiceMode=(\"practiceMode\" in initParams)?practiceMode:initParams.practiceMode;\n         *\/\n   }\n\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\n   \/\/ validate that the current ordering does not violate constraints\n   function validateStimuliOrdering(array) {\n         if (array.length==1) return 1;\n\n         var index=1;\n         while(index<array.length) {\n            current = array[index];\n            prev = array[index-1];\n\n            \/\/ make sure we don't have \n            \/\/ # The trials are presented quasirandomly, with the typical constraint that none of the four trial types be presented twice in succession.\n            if (current.trialType==prev.trialType) {\n               return 0;\n            }\n            index++;\n         }\n         return 1;\n   }\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\n\t\tif (forceErrorCorrection==0) { return document.addEventListener('keyup', keyCheck, false); }\n\t\telse { return document.addEventListener('keyup', keyCheckForcedError, false); }\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n        console.log(\"start\");\n\n       endMessage=0;\n\n      \/\/BUILD TRIALS\n\n      \/\/ FEATURE: \n      \/\/ # The positioning of the two response options is also quasirandom in that typically they cannot appear in the same left\u2013right position three times in succession.\n\n      var keyAtoPosStim;\n      var keyAtoNegStim;\n      var keyBtoPosStim;\n      var keyBtoNegStim;\n\n      if (reverseAnswers==0) {\n         keyAtoPosStim=leftKey; \n         keyAtoNegStim=rightKey; \n         keyBtoPosStim=rightKey;\n         keyBtoNegStim=leftKey;\n      } else {\n         keyAtoPosStim=rightKey; \n         keyAtoNegStim=leftKey; \n         keyBtoPosStim=leftKey;\n         keyBtoNegStim=rightKey;\n      }\n\n      stimBuilder(stimuli, Astim, posstim[0].stimulus, keyAtoPosStim, 1 );\n      stimBuilder(stimuli, Astim, negstim[0].stimulus, keyAtoNegStim, 2 );\n      stimBuilder(stimuli, Bstim, posstim[0].stimulus, keyBtoPosStim, 3 );\n      stimBuilder(stimuli, Bstim, negstim[0].stimulus, keyBtoNegStim, 4 );\n\n      while(1) {\n         shuffle(stimuli);\n         shuffle(stimuli);\n         shuffle(stimuli);\n         if (validateStimuliOrdering(stimuli)==0) continue;\n\t      break;\n      }\n\n      if (stimuliShowCount != 0 && stimuliShowCount < stimuliCount) {\n         stimuli.length = stimuliShowCount; \/\/ trim the length of the stimuli\n      }\n\n\t\tmessage = document.getElementById(\"message\");\n\t\tcategory = document.getElementById(\"category\");\n\t\tstatusMessage = document.getElementById(\"statusMessage\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n      input.value = \"\"; \/\/ MAKE SURE WE START WITH AN EMPTY OUTPUT\n\t\tansleft = document.getElementById(\"ansleft\");\n\t\tansright = document.getElementById(\"ansright\");\n\n      \/\/ SHOW KEY INSTRUCTIONS\n      ansleft.style.display=\"block\";\n      ansright.style.display=\"block\";\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n      statusMessage.innerHMTL = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"\";\n\n      \/\/ COUNTER\n      countCorrect=0;\n      countTotal=0;\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\tcategory.innerHTML = \"\";\n\n         console.log(\"trial \"+currentStimulus.category+\" \"+currentStimulus.stimulus);\n\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\n\t\t\tcategory.innerHTML += addlines + currentStimulus.category;\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n         \/\/ HIDE KEY INSTRUCTIONS\n         ansleft.style.display=\"none\";\n         ansright.style.display=\"none\";\n\n         message.innerHTML = \"\";\n         category.innerHTML = \"\";\n         responseList.sort();\n         medianResponse = responseList[responseList.length\/2];\n\t\t\tinput.value += \"END\";\n         if (practiceMode==1 && medianResponse <= practiceSuccessThreasholdMedianMS && countCorrect\/countTotal >= practiceSuccessThreasholdCorrect) {\n\t\t\t   input.value += \",OK\"; \/\/ signal to proceed\n         }\n\n         console.log(\"Output=\"+input.value);\n         if (practiceMode == 1 && showPracticeStats == 1) {\n            currentStimulus=0;\n            endMessage=1;\n            setTimeout(function() {\n               statusMessage.innerHTML = \"Success rate: \"+Math.round(100*countCorrect\/countTotal)+\"%<br>Median response: \"+medianResponse+ \"ms\";\n               message.innerHTML = \"Press <b>space<\/b> to continue.\";\n               \/*setTimeout(function() {\n                  if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n               }, practiceStatsTimeMS);\n               *\/\n            }, tooSlowMessageShowTimeMS);\n         } else {\n            if (forceErrorCorrection==0) { document.removeEventListener('keyup', keyCheck, false); }\n            else { document.removeEventListener('keyup', keyCheckForcedError, false); }\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n         }\n         \/\/ setTimeout(function() {statusMessage.innerHTML=\"\";}, 1000);\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n       \/\/ OR AT THE END OF PRACTICE\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            console.log(\"space and endMessage=\"+endMessage);\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheck, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n      responseList.push(currentStimulus.reactionTime);\n\n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n         countCorrect++;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, interQuestionDelay);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IRAP, OR AFTER END MESSAGE STATS), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheckForcedError, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n         responseList.push(currentStimulus.reactionTime);\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n            countCorrect++;\n            countTotal++;\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n            countTotal++;\n\t\t\t}\n\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         }\n\t\t\t\/\/ message.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO STIMULI OBJECT\n\tfunction stimBuilder(destination, array, category, correct, trialType){\n      for(i=0;i<array.length;i++) {\n         stimuli.push({stimulus: array[i].stimulus, \n                          index: array[i].index,\n                          correct: correct, \n                          category: category,\n                          trialType: trialType\n         });\n\t\t}\n\t}\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n   \/\/ After this define data and start\n   \/\/ Astim = \n   \/\/ Bstim = \n   \/\/ image_srcs =\n   \/\/ initParams = \n   \/\/ setInitParams\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n image_srcs = [];\n\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\ninitParams ={\"forceErrorCorrection\":1,\"interQuestionDelay\":250,\"stimuliShowCount\":0,\"leftKeyChar\":\"D\",\"rightKeyChar\":\"K\",\"tooSlowMessageMS\":4000,\"tooSlowMessageShowTimeMS\":600,\"practiceSuccessThreasholdCorrect\":0.8,\"practiceSuccessThreasholdMedianMS\":4000,\"showPracticeStats\":false,\"reverseAnswers\":1,\"practiceMode\":1};\nposstim =[{\"stimulus\":\"<b style='color:green'>Good<\\\/b>\",\"correct\":\"NA\",\"index\":1}];\nnegstim =[{\"stimulus\":\"<b style='color:green'>Bad<\\\/b>\",\"correct\":\"NA\",\"index\":2}];\nAstim =[{\"stimulus\":\"<b style='color:black'>Excited<\\\/b>\",\"correct\":\"69\",\"index\":3},{\"stimulus\":\"<b style='color:black'>Happy<\\\/b>\",\"correct\":\"69\",\"index\":4},{\"stimulus\":\"<b style='color:black'>Hopeful<\\\/b>\",\"correct\":\"69\",\"index\":5},{\"stimulus\":\"<b style='color:black'>Love<\\\/b>\",\"correct\":\"69\",\"index\":6},{\"stimulus\":\"<b style='color:black'>Surprised<\\\/b>\",\"correct\":\"69\",\"index\":7},{\"stimulus\":\"<b style='color:black'>Trust<\\\/b>\",\"correct\":\"69\",\"index\":8}];\nBstim =[{\"stimulus\":\"<b style='color:black'>Afraid<\\\/b>\",\"correct\":\"73\",\"index\":9},{\"stimulus\":\"<b style='color:black'>Angry<\\\/b>\",\"correct\":\"73\",\"index\":10},{\"stimulus\":\"<b style='color:black'>Hurt<\\\/b>\",\"correct\":\"73\",\"index\":11},{\"stimulus\":\"<b style='color:black'>Sad<\\\/b>\",\"correct\":\"73\",\"index\":12},{\"stimulus\":\"<b style='color:black'>Sorry<\\\/b>\",\"correct\":\"73\",\"index\":13},{\"stimulus\":\"<b style='color:black'>Upset<\\\/b>\",\"correct\":\"73\",\"index\":14}];\n\n\nsetInitParams();\n\n});\n","QuestionText_Unsafe":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n <div style=\"color: black;\">Insects<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n <div style=\"color: black;\">Flowers<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 2 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 7<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID44","SecondaryAttribute":"For the first part, you will follow a\u00a0SAME\u00a0rule. This means you'll answer as if positive emotions.","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">For the\nfirst part, you will follow a&nbsp;<\/span><u><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">SAME<\/span><\/u><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;rule.\nThis means you'll answer as if positive emotions are&nbsp;<\/span><strong><span style=\"font-size:11.5pt;font-family:&quot;Helvetica&quot;,sans-serif;color:green\">Good<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;and\nnegative emotions are&nbsp;<\/span><strong><span style=\"font-size:11.5pt;font-family:\n&quot;Helvetica&quot;,sans-serif;color:green\">Bad<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">.&nbsp;&nbsp;<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><br>\n<br>\n<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">For the\nsecond part, you will follow an&nbsp;<\/span><u><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">OPPOSITE<\/span><\/u><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;rule.\nThis means you'll answer as if positive emotions are&nbsp;<\/span><strong><span style=\"font-size:11.5pt;font-family:&quot;Helvetica&quot;,sans-serif;color:green\">Bad<\/span><\/strong><strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">&nbsp;<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">and\nnegative emotions are&nbsp;<\/span><strong><span style=\"font-size:11.5pt;font-family:\n&quot;Helvetica&quot;,sans-serif;color:green\">Good<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">.<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">You might\nnot personally agree with these rules \u2013 that\u2019s ok!&nbsp; It\u2019s all a part of the\ntask.<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><o:p><\/o:p><\/span><\/p><p>\n\n\n\n\n\n\n\n\n\n<\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">There are only two rules, SAME and OPPOSITE.\nThese rules will alternate throughout the task \u2013 meaning SAME will be first,\nthen OPPOSITE, then SAME, and so on. &nbsp;<\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\"><br><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">We'll always tell you which rule you\nshould follow.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q1","QuestionType":"DB","Selector":"TB","QuestionDescription":"For the first part, you will follow a\u00a0SAME\u00a0rule. This means you'll answer as if positive emotions...","QuestionID":"QID44"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID49","SecondaryAttribute":"For the next set, the rule to follow is OPPOSITE. That means, if you see a positive emotion under...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size:11.5pt\">For the next set, the rule to follow is OPPOSITE. That means, if you see a positive emotion under <span style=\"color:#008000;\"><b>Bad<\/b><\/span>, then press the \u2018D\u2019 key for TRUE.&nbsp; If you see a negative emotion under <span style=\"color:#008000;\"><b>Good<\/b><\/span>, then press the \u2018K\u2019 key for TRUE.<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">It also means that if you see a positive emotion under <span style=\"color:#008000;\"><b>Good<\/b><\/span>, then press the \u2018K\u2019 key for FALSE.&nbsp; And, if you see a negative emotion under <span style=\"color:#008000;\"><b>Bad<\/b><\/span>, then press the \u2018K\u2019 key for FALSE.<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">Remember, you\u2019ll see a red \u2018<strong><span style=\"color:#FF0000;\">X<\/span><\/strong>\u2019 if you get it wrong or a '<strong>too slow<\/strong>' if you're not going fast enough.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q9","QuestionType":"DB","Selector":"TB","QuestionDescription":"For the next set, the rule to follow is OPPOSITE. That means, if you see a positive emotion under...","QuestionID":"QID49"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID48","SecondaryAttribute":"For the next set, the rule to follow is SAME. That means, if you see a positive emotion under Goo...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11.5pt;\">For the next set, the rule to follow is SAME. That means, if you see a positive emotion under <\/span><span style=\"font-size: 11.5pt; color: rgb(0, 128, 0);\"><strong>Good<\/strong><\/span><span style=\"font-size: 11.5pt;\">, then press the \u2018D\u2019 key for TRUE.&nbsp; If you see a negative emotion under <\/span><span style=\"font-size: 11.5pt; color: rgb(0, 128, 0);\"><strong>Bad<\/strong><\/span><span style=\"font-size: 11.5pt;\">, then press the \u2018K\u2019 key for TRUE.<\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">It also means that if you see a negative emotion under <span style=\"color:#008000;\"><strong>Good<\/strong><\/span>, then press the \u2018K\u2019 key for FALSE.&nbsp; And, if you see a positive emotion under <span style=\"color:#008000;\"><strong>Bad<\/strong><\/span>, then press the \u2018K\u2019 key for FALSE.<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<o:p><\/o:p><\/span><\/p>\n\n<p>&nbsp;<\/p>\n\n<p><span style=\"font-size:11.5pt\">Remember, you\u2019ll see a red \u2018<strong><span style=\"color:red\">X<\/span><\/strong>\u2019 if you get it wrong or a '<strong>too slow<\/strong>' if you're not going fast enough.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q7","QuestionType":"DB","Selector":"TB","QuestionDescription":"For the next set, the rule to follow is SAME. That means, if you see a positive emotion under Goo...","QuestionID":"QID48"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID47","SecondaryAttribute":"For this set, the rule to follow is OPPOSITE. That means, if you see a positive emotion under Bad...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size:11.5pt\">For this set, the rule to follow is <u>OPPOSITE<\/u>. That means, if you see a positive emotion under <span style=\"color:#008000;\"><strong>Bad<\/strong><\/span>, then press the \u2018D\u2019 key for TRUE.&nbsp; If you see a negative emotion under <span style=\"color:#008000;\"><strong>Good<\/strong><\/span>, then press the \u2018D\u2019 key for TRUE.<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">It also means that if you see a positive emotion under <span style=\"color:#008000;\"><strong>Good<\/strong><\/span>, then press the \u2018K\u2019 key for FALSE.&nbsp; And, if you see a negative emotion under <span style=\"color:#008000;\"><strong>Bad<\/strong><\/span>, then press the \u2018K\u2019 key for FALSE.<o:p><\/o:p><\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">&nbsp;<\/span><\/p>\n\n<p><span style=\"font-size:11.5pt\">Let\u2019s give it a try!&nbsp; Try to work as quickly as you can without making mistakes.<\/span><\/p>\n\n<p>&nbsp;<\/p>\n\n<p><span style=\"font-size:11.5pt\">Remember, you\u2019ll see a red \u2018<strong><span style=\"color:red\">X<\/span><\/strong>\u2019 if you get it wrong. You may also see \u2018<strong>too slow<\/strong>\u2019 if you aren\u2019t going fast enough.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q5","QuestionType":"DB","Selector":"TB","QuestionDescription":"For this set, the rule to follow is OPPOSITE. That means, if you see a positive emotion under Bad...","QuestionID":"QID47"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID46","SecondaryAttribute":"For this set, the rule to follow is\u00a0SAME. That means, if you see a positive emotion under\u00a0Good, t.","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":null,"CustomStyles":{"errorStyles":{"styles":null},"errorStylesBG":{"styles":null},"pageStyles":{"styles":null},"textStyles":{"styles":null},"questionStyles":{"styles":null},"choiceStyles":{"styles":null},"headerStyles":{"styles":null},"footerStyles":{"styles":null},"questionSeparatorStyles":{"styles":null},"highlightStyles":{"styles":null},"highlightStylesAlt":{"styles":null},"textEntryStyles":{"styles":null},"borderStyles":{"styles":null},"altRowStyles":{"styles":null}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">For this\nset, the rule to follow is&nbsp;<u>SAME<\/u>.\nThat means, if you see a positive emotion under&nbsp;<\/span><strong><span style=\"font-size:11.0pt;font-family:&quot;Arial&quot;,sans-serif;color:green\">Good<\/span><\/strong><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">, then\npress the \u2018D\u2019 key for TRUE.&nbsp; If you see a negative emotion under&nbsp;<\/span><strong><span style=\"font-size:11.0pt;font-family:&quot;Arial&quot;,sans-serif;color:green\">Bad<\/span><\/strong><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">, then\npress the \u2018D\u2019 key for TRUE.<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">&nbsp;<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">It also means that if you see a\nnegative emotion under&nbsp;<\/span><strong><span style=\"font-size:11.0pt;font-family:\n&quot;Arial&quot;,sans-serif;color:green\">Good<\/span><\/strong><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">, then\npress the \u2018K\u2019 key for FALSE.&nbsp; And, if you see a positive emotion under&nbsp;<\/span><strong><span style=\"font-size:11.0pt;font-family:&quot;Arial&quot;,sans-serif;color:green\">Bad<\/span><\/strong><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">, then\npress the \u2018K\u2019 key for FALSE.<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">&nbsp;<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">Let\u2019s give it a try! &nbsp;Go as\nquickly as you can without making mistakes.<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">&nbsp;<o:p><\/o:p><\/span><\/p><p>\n\n\n\n\n\n\n\n\n\n\n\n<\/p><p><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">Remember, you\u2019ll see a red \u2018<\/span><strong><span style=\"font-size:11.0pt;font-family:&quot;Arial&quot;,sans-serif;color:red\">X<\/span><\/strong><span style=\"font-size: 11pt; font-family: Arial, sans-serif;\">\u2019 if you\nget it wrong. You may also see '<strong><span style=\"font-family:&quot;Arial&quot;,sans-serif\">too slow<\/span><\/strong>' if you aren't\ngoing fast enough.<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q3","QuestionType":"DB","Selector":"TB","QuestionDescription":"For this set, the rule to follow is\u00a0SAME. That means, if you see a positive emotion under\u00a0Good, t...","QuestionID":"QID46"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID22","SecondaryAttribute":"Press 'd' for True Press 'k' for False + Loading all the content... This should take less than 1...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.labmid {\n    position: absolute;\n    top: 1%;\n    left: 50%;\n    transform: translate(-50%,0%);\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;\n}\n\ndiv.ansright {\n    position: absolute;\n    top: 90%;\n    right: 1%;\n    font-size: 18px;\n    text-align: center;\n    font-family: arial;\n    display: none;\n}\n\ndiv.ansleft {\n    position: absolute;\n    top: 90%;\n    left: 1%;\n    text-align: center;\n    font-size: 18px;\n    font-family: arial;   \n    display: none;\n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"statusMessage\"><\/div>\n<\/div>\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"category\"><\/div>\n<\/div>\n\n<div class=\"ansleft\" id=\"ansleft\">\n <div style=\"color: tgtCol;\">Press 'd' for<\/div>\n <div style=\"color: tgtCol;\"><b>True<\/b><\/div>\n<\/div>\n\n<div class=\"ansright\" id=\"ansright\">\n <div style=\"color: tgtCol;\">Press 'k' for<\/div>\n <div style=\"color: tgtCol;\"><b>False<\/b><\/div>\n<\/div>\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">D<\/span> and <span style=\"font-weight: strong\">K<\/span> keys.  If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. You will be expected to correct the error before continuing.<!--errorins-->\n<br>\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nTest<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n","DefaultChoices":false,"DataExportTag":"Q8 ST","QuestionType":"TE","Selector":"SL","QuestionDescription":"Press 'd' for True Press 'k' for False + Loading all the content... This should take less than 1...","QuestionID":"QID22","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\n   \/\/ SETUP\n   var forceErrorCorrection=1;\n   var reverseAnswers=0; \/\/ user was instructed to reverse the default\n   var practiceStatsTimeMS=1000;\n   var interQuestionDelay=250; \/\/ or 400\n   var endMessage=0;\n   var stimuliShowCount=0; \/\/ 0 -- show all combinations 2*(Astim + Bstim)\n   var leftKeyChar=\"D\";\n   var rightKeyChar=\"K\";\n   var tooSlowMessageMS=2000; \/\/ show \"too slow\" message if tooSlowMessageMS response time exceeded\n   var tooSlowMessageShowTimeMS=600; \/\/ show \"too slow\" message for this amount of time\n   var practiceMode=1; \/\/ evaluate responses to pass practice (append ,OK if success)\n   var practiceSuccessThreasholdCorrect=0.80; \/\/ minimum % of correct answers to pass practice\n   var practiceSuccessThreasholdMedianMS=2000; \/\/ minimum median time to pass practice\n   var showPracticeStats=1; \/\/ show stats (success rate, median time) at the end of each practice block\n\n   var leftKey=leftKeyChar.charCodeAt(0);\n   var rightKey=rightKeyChar.charCodeAt(0);\n\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n   var statusMessage;\n\tvar stimuli = [];\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n   var ansleft;\n   var ansright;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\n   \/\/ COUNTERS\n   var countCorrect;\n   var countTotal;\n   var responseList=[];\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUITID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n   var InputId = document.getElementById(\"QR~QID\" + qID);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n   if (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\";\n   if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\";\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\n   function setInitParams() {\n      \/\/ initParams exist\n      if (typeof initParams == 'undefined' ) {\n         console.log(\"initParams doesn't exist\");\n         return;\n      }\n\n      console.log(\"initParams exists\");\n\n      if (\"forceErrorCorrection\" in initParams) {\n         forceErrorCorrection=initParams.forceErrorCorrection;\n         console.log(\"set forceErrorCorrection to \"+forceErrorCorrection);\n      }\n      if (\"reverseAnswers\" in initParams) {\n         reverseAnswers=initParams.reverseAnswers;\n         console.log(\"set reverseAnswers to \"+reverseAnswers);\n      }\n      if (\"interQuestionDelay\" in initParams) {\n         interQuestionDelay=initParams.interQuestionDelay;\n         console.log(\"set interQuestionDelay to \"+interQuestionDelay);\n      }\n      if (\"stimuliShowCount\" in initParams) {\n         stimuliShowCount=initParams.stimuliShowCount;\n         console.log(\"set stimuliShowCount to \"+stimuliShowCount);\n      }\n      if (\"leftKeyChar\" in initParams) {\n         leftKeyChar=initParams.leftKeyChar;\n         leftKey=leftKeyChar.charCodeAt(0);\n         console.log(\"set leftKeyChar to \"+leftKeyChar);\n      }\n      if (\"rightKeyChar\" in initParams) {\n         rightKeyChar=initParams.rightKeyChar;\n         rightKey=rightKeyChar.charCodeAt(0);\n         console.log(\"set rightKeyChar to \"+rightKeyChar);\n      }\n      if (\"tooSlowMessageMS\" in initParams) {\n         tooSlowMessageMS=initParams.tooSlowMessageMS;\n         console.log(\"set tooSlowMessageMS to \"+tooSlowMessageMS);\n      }\n      if (\"tooSlowMessageShowTimeMS\" in initParams) {\n         tooSlowMessageShowTimeMS=initParams.tooSlowMessageShowTimeMS;\n         console.log(\"set tooSlowMessageShowTimeMS to \"+tooSlowMessageShowTimeMS);\n      }\n      if (\"practiceSuccessThreasholdCorrect\" in initParams) {\n         practiceSuccessThreasholdCorrect=initParams.practiceSuccessThreasholdCorrect;\n         console.log(\"set practiceSuccessThreasholdCorrect to \"+practiceSuccessThreasholdCorrect);\n      }\n      if (\"practiceSuccessThreasholdMedianMS\" in initParams) {\n         practiceSuccessThreasholdMedianMS=initParams.practiceSuccessThreasholdMedianMS;\n         console.log(\"set practiceSuccessThreasholdMedianMS to \"+practiceSuccessThreasholdMedianMS);\n      }\n      if (\"practiceMode\" in initParams) {\n         practiceMode=initParams.practiceMode;\n         console.log(\"set practiceMode to \"+practiceMode);\n      }\n      if (\"showPracticeStats\" in initParams) {\n         showPracticeStats=initParams.showPracticeStats;\n         console.log(\"set showPracticeStats to \"+showPracticeStats);\n      }\n      \/*\n         forceErrorCorrection=(\"forceErrorCorrection\" in initParams)?forceErrorCorrection:initParams.forceErrorCorrection;\n         reverseAnswers=(\"reverseAnswers\" in initParams)?reverseAnswers:initParams.reverseAnswers;\n         interQuestionDelay=(\"interQuestionDelay\" in initParams)?interQuestionDelay:initParams.interQuestionDelay;\n         stimuliShowCount=(\"stimuliShowCount\" in initParams)?stimuliShowCount:initParams.stimuliShowCount;\n         leftKeyChar=(\"leftKeyChar\" in initParams)?leftKeyChar:initParams.leftKeyChar;\n         rightKeyChar=(\"rightKeyChar\" in initParams)?rightKeyChar:initParams.rightKeyChar;\n         tooSlowMessageMS=(\"tooSlowMessageMS\" in initParams)?tooSlowMessageMS:initParams.tooSlowMessageMS;\n         tooSlowMessageShowTimeMS=(\"tooSlowMessageShowTimeMS\" in initParams)?tooSlowMessageShowTimeMS:initParams.tooSlowMessageShowTimeMS;\n         practiceMode=(\"practiceMode\" in initParams)?practiceMode:initParams.practiceMode;\n         *\/\n   }\n\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\n   \/\/ validate that the current ordering does not violate constraints\n   function validateStimuliOrdering(array) {\n         if (array.length==1) return 1;\n\n         var index=1;\n         while(index<array.length) {\n            current = array[index];\n            prev = array[index-1];\n\n            \/\/ make sure we don't have \n            \/\/ # The trials are presented quasirandomly, with the typical constraint that none of the four trial types be presented twice in succession.\n            if (current.trialType==prev.trialType) {\n               return 0;\n            }\n            index++;\n         }\n         return 1;\n   }\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\n\t\tif (forceErrorCorrection==0) { return document.addEventListener('keyup', keyCheck, false); }\n\t\telse { return document.addEventListener('keyup', keyCheckForcedError, false); }\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n        console.log(\"start\");\n\n       endMessage=0;\n\n      \/\/BUILD TRIALS\n\n      \/\/ FEATURE: \n      \/\/ # The positioning of the two response options is also quasirandom in that typically they cannot appear in the same left\u2013right position three times in succession.\n\n      var keyAtoPosStim;\n      var keyAtoNegStim;\n      var keyBtoPosStim;\n      var keyBtoNegStim;\n\n      if (reverseAnswers==0) {\n         keyAtoPosStim=leftKey; \n         keyAtoNegStim=rightKey; \n         keyBtoPosStim=rightKey;\n         keyBtoNegStim=leftKey;\n      } else {\n         keyAtoPosStim=rightKey; \n         keyAtoNegStim=leftKey; \n         keyBtoPosStim=leftKey;\n         keyBtoNegStim=rightKey;\n      }\n\n      stimBuilder(stimuli, Astim, posstim[0].stimulus, keyAtoPosStim, 1 );\n      stimBuilder(stimuli, Astim, negstim[0].stimulus, keyAtoNegStim, 2 );\n      stimBuilder(stimuli, Bstim, posstim[0].stimulus, keyBtoPosStim, 3 );\n      stimBuilder(stimuli, Bstim, negstim[0].stimulus, keyBtoNegStim, 4 );\n\n      while(1) {\n         shuffle(stimuli);\n         shuffle(stimuli);\n         shuffle(stimuli);\n         if (validateStimuliOrdering(stimuli)==0) continue;\n\t      break;\n      }\n\n      if (stimuliShowCount != 0 && stimuliShowCount < stimuliCount) {\n         stimuli.length = stimuliShowCount; \/\/ trim the length of the stimuli\n      }\n\n\t\tmessage = document.getElementById(\"message\");\n\t\tcategory = document.getElementById(\"category\");\n\t\tstatusMessage = document.getElementById(\"statusMessage\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n      input.value = \"\"; \/\/ MAKE SURE WE START WITH AN EMPTY OUTPUT\n\t\tansleft = document.getElementById(\"ansleft\");\n\t\tansright = document.getElementById(\"ansright\");\n\n      \/\/ SHOW KEY INSTRUCTIONS\n      ansleft.style.display=\"block\";\n      ansright.style.display=\"block\";\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n      statusMessage.innerHMTL = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"\";\n\n      \/\/ COUNTER\n      countCorrect=0;\n      countTotal=0;\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\tcategory.innerHTML = \"\";\n\n         console.log(\"trial \"+currentStimulus.category+\" \"+currentStimulus.stimulus);\n\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\n\t\t\tcategory.innerHTML += addlines + currentStimulus.category;\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n         \/\/ HIDE KEY INSTRUCTIONS\n         ansleft.style.display=\"none\";\n         ansright.style.display=\"none\";\n\n         message.innerHTML = \"\";\n         category.innerHTML = \"\";\n         responseList.sort();\n         medianResponse = responseList[responseList.length\/2];\n\t\t\tinput.value += \"END\";\n         if (practiceMode==1 && medianResponse <= practiceSuccessThreasholdMedianMS && countCorrect\/countTotal >= practiceSuccessThreasholdCorrect) {\n\t\t\t   input.value += \",OK\"; \/\/ signal to proceed\n         }\n\n         console.log(\"Output=\"+input.value);\n         if (practiceMode == 1 && showPracticeStats == 1) {\n            currentStimulus=0;\n            endMessage=1;\n            setTimeout(function() {\n               statusMessage.innerHTML = \"Success rate: \"+Math.round(100*countCorrect\/countTotal)+\"%<br>Median response: \"+medianResponse+ \"ms\";\n               message.innerHTML = \"Press <b>space<\/b> to continue.\";\n               \/*setTimeout(function() {\n                  if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n               }, practiceStatsTimeMS);\n               *\/\n            }, tooSlowMessageShowTimeMS);\n         } else {\n            if (forceErrorCorrection==0) { document.removeEventListener('keyup', keyCheck, false); }\n            else { document.removeEventListener('keyup', keyCheckForcedError, false); }\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n         }\n         \/\/ setTimeout(function() {statusMessage.innerHTML=\"\";}, 1000);\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n       \/\/ OR AT THE END OF PRACTICE\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            console.log(\"space and endMessage=\"+endMessage);\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheck, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n      responseList.push(currentStimulus.reactionTime);\n\n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n         countCorrect++;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, interQuestionDelay);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IRAP, OR AFTER END MESSAGE STATS), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheckForcedError, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n         responseList.push(currentStimulus.reactionTime);\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n            countCorrect++;\n            countTotal++;\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n            countTotal++;\n\t\t\t}\n\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         }\n\t\t\t\/\/ message.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO STIMULI OBJECT\n\tfunction stimBuilder(destination, array, category, correct, trialType){\n      for(i=0;i<array.length;i++) {\n         stimuli.push({stimulus: array[i].stimulus, \n                          index: array[i].index,\n                          correct: correct, \n                          category: category,\n                          trialType: trialType\n         });\n\t\t}\n\t}\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n   \/\/ After this define data and start\n   \/\/ Astim = \n   \/\/ Bstim = \n   \/\/ image_srcs =\n   \/\/ initParams = \n   \/\/ setInitParams\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n image_srcs = [];\n\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\ninitParams ={\"forceErrorCorrection\":1,\"interQuestionDelay\":250,\"stimuliShowCount\":0,\"leftKeyChar\":\"D\",\"rightKeyChar\":\"K\",\"tooSlowMessageMS\":4000,\"tooSlowMessageShowTimeMS\":600,\"practiceSuccessThreasholdCorrect\":0.8,\"practiceSuccessThreasholdMedianMS\":4000,\"showPracticeStats\":false,\"reverseAnswers\":0,\"practiceMode\":0};\nposstim =[{\"stimulus\":\"<b style='color:green'>Good<\\\/b>\",\"correct\":\"NA\",\"index\":1}];\nnegstim =[{\"stimulus\":\"<b style='color:green'>Bad<\\\/b>\",\"correct\":\"NA\",\"index\":2}];\nAstim =[{\"stimulus\":\"<b style='color:black'>Excited<\\\/b>\",\"correct\":\"69\",\"index\":3},{\"stimulus\":\"<b style='color:black'>Happy<\\\/b>\",\"correct\":\"69\",\"index\":4},{\"stimulus\":\"<b style='color:black'>Hopeful<\\\/b>\",\"correct\":\"69\",\"index\":5},{\"stimulus\":\"<b style='color:black'>Love<\\\/b>\",\"correct\":\"69\",\"index\":6},{\"stimulus\":\"<b style='color:black'>Surprised<\\\/b>\",\"correct\":\"69\",\"index\":7},{\"stimulus\":\"<b style='color:black'>Trust<\\\/b>\",\"correct\":\"69\",\"index\":8}];\nBstim =[{\"stimulus\":\"<b style='color:black'>Afraid<\\\/b>\",\"correct\":\"73\",\"index\":9},{\"stimulus\":\"<b style='color:black'>Angry<\\\/b>\",\"correct\":\"73\",\"index\":10},{\"stimulus\":\"<b style='color:black'>Hurt<\\\/b>\",\"correct\":\"73\",\"index\":11},{\"stimulus\":\"<b style='color:black'>Sad<\\\/b>\",\"correct\":\"73\",\"index\":12},{\"stimulus\":\"<b style='color:black'>Sorry<\\\/b>\",\"correct\":\"73\",\"index\":13},{\"stimulus\":\"<b style='color:black'>Upset<\\\/b>\",\"correct\":\"73\",\"index\":14}];\n\n\nsetInitParams();\n\n});\n"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID40","SecondaryAttribute":"Press 'd' for True Press 'k' for False + Loading all the content... This should take less than 1...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON","Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":null,"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.labmid {\n    position: absolute;\n    top: 1%;\n    left: 50%;\n    transform: translate(-50%,0%);\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;\n}\n\ndiv.ansright {\n    position: absolute;\n    top: 90%;\n    right: 1%;\n    font-size: 18px;\n    text-align: center;\n    font-family: arial;\n    display: none;\n}\n\ndiv.ansleft {\n    position: absolute;\n    top: 90%;\n    left: 1%;\n    text-align: center;\n    font-size: 18px;\n    font-family: arial;   \n    display: none;\n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"statusMessage\"><\/div>\n<\/div>\n\n<div class=\"labmid\">\n <div style=\"color: tgtCol;\" id=\"category\"><\/div>\n<\/div>\n\n<div class=\"ansleft\" id=\"ansleft\">\n <div style=\"color: tgtCol;\">Press 'd' for<\/div>\n <div style=\"color: tgtCol;\"><b>True<\/b><\/div>\n<\/div>\n\n<div class=\"ansright\" id=\"ansright\">\n <div style=\"color: tgtCol;\">Press 'k' for<\/div>\n <div style=\"color: tgtCol;\"><b>False<\/b><\/div>\n<\/div>\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">D<\/span> and <span style=\"font-weight: strong\">K<\/span> keys.  If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. You will be expected to correct the error before continuing.<!--errorins-->\n<br>\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nTest<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n","DefaultChoices":false,"DataExportTag":"Q10 OT","QuestionType":"TE","Selector":"SL","QuestionDescription":"Press 'd' for True Press 'k' for False + Loading all the content... This should take less than 1...","QuestionID":"QID40","QuestionJS":"Qualtrics.SurveyEngine.addOnload(function() {\n\n   \/\/ SETUP\n   var forceErrorCorrection=1;\n   var reverseAnswers=0; \/\/ user was instructed to reverse the default\n   var practiceStatsTimeMS=1000;\n   var interQuestionDelay=250; \/\/ or 400\n   var endMessage=0;\n   var stimuliShowCount=0; \/\/ 0 -- show all combinations 2*(Astim + Bstim)\n   var leftKeyChar=\"D\";\n   var rightKeyChar=\"K\";\n   var tooSlowMessageMS=2000; \/\/ show \"too slow\" message if tooSlowMessageMS response time exceeded\n   var tooSlowMessageShowTimeMS=600; \/\/ show \"too slow\" message for this amount of time\n   var practiceMode=1; \/\/ evaluate responses to pass practice (append ,OK if success)\n   var practiceSuccessThreasholdCorrect=0.80; \/\/ minimum % of correct answers to pass practice\n   var practiceSuccessThreasholdMedianMS=2000; \/\/ minimum median time to pass practice\n   var showPracticeStats=1; \/\/ show stats (success rate, median time) at the end of each practice block\n\n   var leftKey=leftKeyChar.charCodeAt(0);\n   var rightKey=rightKeyChar.charCodeAt(0);\n\n\t\/\/DECLARE INITIAL VARIABLES\n\tvar currentStimulus;\n\tvar end; \n\tvar image_srcs;\n\tvar images; \n\tvar loadedImages;\n\tvar input; \n\tvar message;\n   var statusMessage;\n\tvar stimuli = [];\n\tvar note;\n\tvar posstim;\n\tvar negstim;\n\tvar Astim;\n\tvar Bstim;\n   var ansleft;\n   var ansright;\n\n\t\/\/USED FOR ALTERNATING TRIAL FORMAT ONLY\n\tvar tgts;\n\tvar cats;\n\tvar tgtnum = [];\n\tvar catnum = [];\n\t\n\t\/\/DEFINE addlines. THIS WILL BE PUT IN FRONT OF WORD STIMULI TO DROP THEM DOWN TO BETTER ALIGN WITH IMAGE CENTERS.\n \tvar addlines=\"<br><br><br>\";\t\n\t\n\t\/\/ THE FOLLOWING ARE ONLY USED IF FORCED ERROR CORRECTION IS ENABLED\n\tvar fix = 0;\n\tvar error;\n\n   \/\/ COUNTERS\n   var countCorrect;\n   var countTotal;\n   var responseList=[];\n\t\n\t\/\/ CLEAN qID VARIABLE OF CHARACTERS AND SAVE AS NUMERIC FOR LATER USE\n\tvar qID =this.questionId; \n\tqID = qID.replace(\"QID\", '');\n\tqID = parseInt(qID);\n\n\t\/\/ GRAB INPUITID AS REFERENCE TO QUESTION AND HIDE TEXT BOX\n   var InputId = document.getElementById(\"QR~QID\" + qID);\n\tInputId.style.display=\"none\";\n\n\t\/\/ HIDE NEXT BUTTON\n   if (document.getElementById('NextButton')) document.getElementById('NextButton').style.display=\"none\";\n   if (document.getElementById('PrevButton')) document.getElementById('PrevButton').style.display=\"none\";\n\tthis.hideNextButton();\n\t\n\n\t\/\/DECLARE FUNCTIONS\n\n   function setInitParams() {\n      \/\/ initParams exist\n      if (typeof initParams == 'undefined' ) {\n         console.log(\"initParams doesn't exist\");\n         return;\n      }\n\n      console.log(\"initParams exists\");\n\n      if (\"forceErrorCorrection\" in initParams) {\n         forceErrorCorrection=initParams.forceErrorCorrection;\n         console.log(\"set forceErrorCorrection to \"+forceErrorCorrection);\n      }\n      if (\"reverseAnswers\" in initParams) {\n         reverseAnswers=initParams.reverseAnswers;\n         console.log(\"set reverseAnswers to \"+reverseAnswers);\n      }\n      if (\"interQuestionDelay\" in initParams) {\n         interQuestionDelay=initParams.interQuestionDelay;\n         console.log(\"set interQuestionDelay to \"+interQuestionDelay);\n      }\n      if (\"stimuliShowCount\" in initParams) {\n         stimuliShowCount=initParams.stimuliShowCount;\n         console.log(\"set stimuliShowCount to \"+stimuliShowCount);\n      }\n      if (\"leftKeyChar\" in initParams) {\n         leftKeyChar=initParams.leftKeyChar;\n         leftKey=leftKeyChar.charCodeAt(0);\n         console.log(\"set leftKeyChar to \"+leftKeyChar);\n      }\n      if (\"rightKeyChar\" in initParams) {\n         rightKeyChar=initParams.rightKeyChar;\n         rightKey=rightKeyChar.charCodeAt(0);\n         console.log(\"set rightKeyChar to \"+rightKeyChar);\n      }\n      if (\"tooSlowMessageMS\" in initParams) {\n         tooSlowMessageMS=initParams.tooSlowMessageMS;\n         console.log(\"set tooSlowMessageMS to \"+tooSlowMessageMS);\n      }\n      if (\"tooSlowMessageShowTimeMS\" in initParams) {\n         tooSlowMessageShowTimeMS=initParams.tooSlowMessageShowTimeMS;\n         console.log(\"set tooSlowMessageShowTimeMS to \"+tooSlowMessageShowTimeMS);\n      }\n      if (\"practiceSuccessThreasholdCorrect\" in initParams) {\n         practiceSuccessThreasholdCorrect=initParams.practiceSuccessThreasholdCorrect;\n         console.log(\"set practiceSuccessThreasholdCorrect to \"+practiceSuccessThreasholdCorrect);\n      }\n      if (\"practiceSuccessThreasholdMedianMS\" in initParams) {\n         practiceSuccessThreasholdMedianMS=initParams.practiceSuccessThreasholdMedianMS;\n         console.log(\"set practiceSuccessThreasholdMedianMS to \"+practiceSuccessThreasholdMedianMS);\n      }\n      if (\"practiceMode\" in initParams) {\n         practiceMode=initParams.practiceMode;\n         console.log(\"set practiceMode to \"+practiceMode);\n      }\n      if (\"showPracticeStats\" in initParams) {\n         showPracticeStats=initParams.showPracticeStats;\n         console.log(\"set showPracticeStats to \"+showPracticeStats);\n      }\n      \/*\n         forceErrorCorrection=(\"forceErrorCorrection\" in initParams)?forceErrorCorrection:initParams.forceErrorCorrection;\n         reverseAnswers=(\"reverseAnswers\" in initParams)?reverseAnswers:initParams.reverseAnswers;\n         interQuestionDelay=(\"interQuestionDelay\" in initParams)?interQuestionDelay:initParams.interQuestionDelay;\n         stimuliShowCount=(\"stimuliShowCount\" in initParams)?stimuliShowCount:initParams.stimuliShowCount;\n         leftKeyChar=(\"leftKeyChar\" in initParams)?leftKeyChar:initParams.leftKeyChar;\n         rightKeyChar=(\"rightKeyChar\" in initParams)?rightKeyChar:initParams.rightKeyChar;\n         tooSlowMessageMS=(\"tooSlowMessageMS\" in initParams)?tooSlowMessageMS:initParams.tooSlowMessageMS;\n         tooSlowMessageShowTimeMS=(\"tooSlowMessageShowTimeMS\" in initParams)?tooSlowMessageShowTimeMS:initParams.tooSlowMessageShowTimeMS;\n         practiceMode=(\"practiceMode\" in initParams)?practiceMode:initParams.practiceMode;\n         *\/\n   }\n\n\t\/\/SHUFFLER - RANDOMIZES CONTENTS OF AN ARRAY USING A WELL VALIDATED METHOD\n\tfunction shuffle(array) {\n\t\t\tvar currentIndex = array.length, temporaryValue, randomIndex ;\n\t\t\t\n\t\t\t\/\/ While there remain elements to shuffle...\n\t\t\twhile (0 !== currentIndex) {\n\t\t\t\n\t\t\t\t\/\/ Pick a remaining element...\n\t\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\t\tcurrentIndex -= 1;\n\t\t\t\n\t\t\t\t\/\/ And swap it with the current element.\n\t\t\t\ttemporaryValue = array[currentIndex];\n\t\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\t\tarray[randomIndex] = temporaryValue;\n\t\t\t}\n\t\t\t\n\t\t\treturn array;\n\t\t};\n\n   \/\/ validate that the current ordering does not violate constraints\n   function validateStimuliOrdering(array) {\n         if (array.length==1) return 1;\n\n         var index=1;\n         while(index<array.length) {\n            current = array[index];\n            prev = array[index-1];\n\n            \/\/ make sure we don't have \n            \/\/ # The trials are presented quasirandomly, with the typical constraint that none of the four trial types be presented twice in succession.\n            if (current.trialType==prev.trialType) {\n               return 0;\n            }\n            index++;\n         }\n         return 1;\n   }\n\t\n\t\/\/ FUNCTION 1 - IMAGE LOADER\n\t\/* This function is the first command in the IAT. It is invoked by code at the bottom of this script \n\tand puts all image stimuli in an array called images. If the image_srcs object has no URLs in it, this skips ahead\n\tto the next portion of the IAT without loading any images. If errors are encountered, the IAT block is skipped. *\/\n\tfunction loadImages (image_srcs) {\n\t\tvar src, _i, _len;\n\t\t\n\t\t\/\/If no images specified, skip this step\n\t\tif(\timage_srcs.length == 0) {return imagesLoaded();}\n\t\t\n\t\timages = [];\n\t\tloadedImages = 0;\n\t\t\t\t\n\t\tfor (_i = 0, _len = image_srcs.length; _i < _len; _i++) {\n\t\t\tsrc = image_srcs[_i];\n\t\t\timages.push(new Image);\n\n\t\t\timages[images.length - 1].src = src;\n\t\t\t\n\t\t\timages[images.length - 1].onerror = function() {\n\t\t\t\talert(\"Your web browser encountered an issue running this portion of the study. You will be skipped ahead. You may have to click through this message several times.\");\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n\t\t\t};\n\t\t\t\n\t\t\timages[images.length - 1].onload = function() {\n\t\t\t\tloadedImages++;\n\t\t\t\tif (loadedImages = images.length) return imagesLoaded();\n\t\t\t};\n\n\t\t}\n\t\treturn images;\n\t};\n\t\t\n\t\n\t\/\/ FUNCTION 2 - IMAGES LOADED\n\t\/* Runs when all image loader is finished, starts the keypress listener. \n\tFor a forced-error-correction IAT, the last line should return keyCheckForcedError instead of keyCheck*\/\n\tfunction imagesLoaded() {\n\t\tdocument.getElementById('loading').style.display = 'none';\n\t\tdocument.getElementById('instructions').style.display = 'block';\n\n\t\tif (forceErrorCorrection==0) { return document.addEventListener('keyup', keyCheck, false); }\n\t\telse { return document.addEventListener('keyup', keyCheckForcedError, false); }\n\t};\n\t\n\n\t\/\/ FUNCTION 3 - START FUNCTION\n\t\/* Runs when the spacebar is pressed after the keypress listener has begun. Does initial houskeeping (grabs HTML content\n\tsuch as message, error, etc. and makes it so we can write to them). It sets as 'input' the contents of the question text box,\n\tso we can write data to the question by editing that value. It also sets instructions to null. It then shuffles stimuli and\n\tstarts the first trial. *\/\n\t function start() {\n        console.log(\"start\");\n\n       endMessage=0;\n\n      \/\/BUILD TRIALS\n\n      \/\/ FEATURE: \n      \/\/ # The positioning of the two response options is also quasirandom in that typically they cannot appear in the same left\u2013right position three times in succession.\n\n      var keyAtoPosStim;\n      var keyAtoNegStim;\n      var keyBtoPosStim;\n      var keyBtoNegStim;\n\n      if (reverseAnswers==0) {\n         keyAtoPosStim=leftKey; \n         keyAtoNegStim=rightKey; \n         keyBtoPosStim=rightKey;\n         keyBtoNegStim=leftKey;\n      } else {\n         keyAtoPosStim=rightKey; \n         keyAtoNegStim=leftKey; \n         keyBtoPosStim=leftKey;\n         keyBtoNegStim=rightKey;\n      }\n\n      stimBuilder(stimuli, Astim, posstim[0].stimulus, keyAtoPosStim, 1 );\n      stimBuilder(stimuli, Astim, negstim[0].stimulus, keyAtoNegStim, 2 );\n      stimBuilder(stimuli, Bstim, posstim[0].stimulus, keyBtoPosStim, 3 );\n      stimBuilder(stimuli, Bstim, negstim[0].stimulus, keyBtoNegStim, 4 );\n\n      while(1) {\n         shuffle(stimuli);\n         shuffle(stimuli);\n         shuffle(stimuli);\n         if (validateStimuliOrdering(stimuli)==0) continue;\n\t      break;\n      }\n\n      if (stimuliShowCount != 0 && stimuliShowCount < stimuliCount) {\n         stimuli.length = stimuliShowCount; \/\/ trim the length of the stimuli\n      }\n\n\t\tmessage = document.getElementById(\"message\");\n\t\tcategory = document.getElementById(\"category\");\n\t\tstatusMessage = document.getElementById(\"statusMessage\");\n\t\terror = document.getElementById(\"error\"); \/\/USED ONLY WITH FORCED ERROR CORRECTION\n\t\tinput = document.getElementById(\"QR~QID\" + qID);\n      input.value = \"\"; \/\/ MAKE SURE WE START WITH AN EMPTY OUTPUT\n\t\tansleft = document.getElementById(\"ansleft\");\n\t\tansright = document.getElementById(\"ansright\");\n\n      \/\/ SHOW KEY INSTRUCTIONS\n      ansleft.style.display=\"block\";\n      ansright.style.display=\"block\";\n\n\t\t\/\/MAKE INSTRUCTIONS EMPTY\n\t\tinstructions.innerHTML = \"\"; \n      statusMessage.innerHMTL = \"\"; \n\n\t\t\/\/ADD NOTE BELOW WINDOW\n\t\tnote = document.getElementById(\"note\");\n\t\tnote.innerHTML = \"\";\n\n      \/\/ COUNTER\n      countCorrect=0;\n      countTotal=0;\n\t\treturn nextQuestion();\n\t};\n\t\n\t\n\t\/\/ FUNCTION 4 - LAUNCHES QUESTION\n\t\/* This function runs on start() and after a new trial begins. If we have not depleted the stimuli object, it grabs (and removes)\n\tthe last trial from the stimuli object and calls it currentStimulus, then proceeds to use it for an IAT trial. A start time is\n\tidentified and the stimulus is shown (different methods for images or words). If the stimuli object is depleted, appends END\n\tto data and advances to the next IAT block. *\/\n\t  function nextQuestion() {\n\t\tif (stimuli.length !==0) {\n\n\t\t\tcurrentStimulus = stimuli.pop();\n\t\t\t\t\n\t\t\t\/\/ SET MESSAGE TO EMPTY\n\t\t\tmessage.innerHTML = \"\";\n\t\t\tcategory.innerHTML = \"\";\n\n         console.log(\"trial \"+currentStimulus.category+\" \"+currentStimulus.stimulus);\n\n\t\t\t\/\/ DECLARE START OF CURRENT STIMULUS\n\t\t\tcurrentStimulus.start = new Date().getTime();\n\n\t\t\tcategory.innerHTML += addlines + currentStimulus.category;\n\t\t\t\t\n\t\t\t\/\/ FOR IMAGES, USE APPEND CHILD TO DISPLAY. IF NOT, ADD STIMULUS VALUE TO MESSAGE.\n\t\t\tif (typeof currentStimulus.stimulus === 'object') {\n \t\t\t\treturn message.appendChild(currentStimulus.stimulus);\n\t\t\t} else {\n \t\t\t\treturn message.innerHTML += addlines + currentStimulus.stimulus;\n \t\t\t}\n\n\t\t} else {\n\n         \/\/ HIDE KEY INSTRUCTIONS\n         ansleft.style.display=\"none\";\n         ansright.style.display=\"none\";\n\n         message.innerHTML = \"\";\n         category.innerHTML = \"\";\n         responseList.sort();\n         medianResponse = responseList[responseList.length\/2];\n\t\t\tinput.value += \"END\";\n         if (practiceMode==1 && medianResponse <= practiceSuccessThreasholdMedianMS && countCorrect\/countTotal >= practiceSuccessThreasholdCorrect) {\n\t\t\t   input.value += \",OK\"; \/\/ signal to proceed\n         }\n\n         console.log(\"Output=\"+input.value);\n         if (practiceMode == 1 && showPracticeStats == 1) {\n            currentStimulus=0;\n            endMessage=1;\n            setTimeout(function() {\n               statusMessage.innerHTML = \"Success rate: \"+Math.round(100*countCorrect\/countTotal)+\"%<br>Median response: \"+medianResponse+ \"ms\";\n               message.innerHTML = \"Press <b>space<\/b> to continue.\";\n               \/*setTimeout(function() {\n                  if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n               }, practiceStatsTimeMS);\n               *\/\n            }, tooSlowMessageShowTimeMS);\n         } else {\n            if (forceErrorCorrection==0) { document.removeEventListener('keyup', keyCheck, false); }\n            else { document.removeEventListener('keyup', keyCheckForcedError, false); }\n            if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n         }\n         \/\/ setTimeout(function() {statusMessage.innerHTML=\"\";}, 1000);\n\n\t\t\t\/\/WHEN STIMULI HAS NO TRIALS REMAINING, APPEND END, DISABLE KEY LISTENER, AND CLICK NEXT BUTTON\n\t\t\t\/* IMPORTANT: In Qualtrics, the keypress listener stays active from one page to the next and \n\t\t\tmust therefore be disabled before continuing. *\/\n\n\t\t}\n\t};\n\t \n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR STANDARD ERROR MODE\n\t\/* This function grabs whatever key was pressed and saves it as keyCode. Depending on what was pressed, it will\n\tstart the IAT, write data, display next trials, etc. Note that errors are handled by swapping the message out \n\tfor a red X (the error message below the stimulus is NOT used). Note also that an alternative version of this\n\tfunction is defined below but only ONE will be called in a given IAT.*\/\n\t function keyCheck(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IAT), SPACEBAR CAN START IAT\n       \/\/ OR AT THE END OF PRACTICE\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            console.log(\"space and endMessage=\"+endMessage);\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheck, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ ADD END PROPRETY TO CURRENTSTIM\n\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\t\n\t\t\/\/ CALCULATE DIFFERENCE AND SAVE\n\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n      responseList.push(currentStimulus.reactionTime);\n\n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/TRADITIONAL ERROR MODE\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n\t\t\tmessage.innerHTML = \"<br><br><br>+\";\n\t\t\tcurrentStimulus = null;\n         countCorrect++;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\n\t\t\tmessage.innerHTML = \"<b style='color:red;font-size:80px'><br><br>X<\/b>\";\n\t\t\tcurrentStimulus = null;\n         countTotal++;\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         } else {\n\t\t\t   \/\/ error.innerHTML = \"\";\n         }\n\t\t\tsetTimeout(function() {return message.innerHTML = \"<br><br><br>+\";}, 250);\n\t\t\treturn setTimeout(function() {return nextQuestion();}, interQuestionDelay);\n\t\t}\n\t};\n\t\n\t\n\t\/\/ FUNCTION 5 - KEYPRESS LISTENER FOR FORCED ERROR CORRECTION MODE\n\t\/* This is an alternate form of same function, but it (1) only writes data when a correct response is entered (2) \n\ton errors, displays a red X that remains until the correct response is entered, and (3) scores as an error if the \n\tinitial responses was incorrect (Greenwald et al., 2003). This should be scored without an error penalty as \n\tcorrecting the response naturally builds in an error.  *\/\n\t\n\tfunction keyCheckForcedError(e) {\n\t\tvar keyCode;\n\t\t\t\n\t\t\/* depending on how this was triggered, grab keycode and save as keyCode. May need upgrading as web \n\t\tstandards improve for keypress handling. *\/ \n\t\tif (window.event) {\n\t\t\tkeyCode = event.keyCode;\n\t\t} else {\n\t\t\tkeyCode = e.keyCode;\n\t\t}\n\t\t\t\n\t\t\/\/ IF NO CURRENT STIMULUS (ONLY HAPPENS PRIOR TO START OF IRAP, OR AFTER END MESSAGE STATS), SPACEBAR CAN START IAT\n\t\tif (!currentStimulus) {\n\t\t\tif (keyCode === 32) {\n            if (endMessage==1) {\n               document.removeEventListener('keyup', keyCheckForcedError, false); \n               if (document.getElementById('NextButton')) document.getElementById('NextButton').click();\n            } else {\n\t\t\t\t  start();\n            }\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\t\/\/ NEXT, END FUNCTION IF NOT E OR I KEYS. IF CONTINUING AFTER THIS, MUST BE E OR I KEYPRESS.\n\t\tif (!(keyCode === leftKey || keyCode === rightKey)) return;\n\t\t\t\n\t\t\/\/ note - do NOT grab timing here as it may be an error response\n \n\t\t\/\/IF THE KEYCODE MATCHES THE CORRECT PART OF CURRENT STIMULUS, WRITE TO DATA AND DO OTHER STEPS\n\t\t\/\/FORCED ERROR CORRECTION MODE.\n\t\tif (keyCode === currentStimulus.correct) {\t\t\t\t\n\n\t\t\t\/\/ Score the timing and save it\n\t\t\tcurrentStimulus.end = new Date().getTime();\n\t\t\tcurrentStimulus.reactionTime = currentStimulus.end - currentStimulus.start;\n         responseList.push(currentStimulus.reactionTime);\n\n\t\t\tif (fix==0){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"C\" + currentStimulus.reactionTime + \",\";\t\n            countCorrect++;\n            countTotal++;\n\t\t\t}\n\n\t\t\tif (fix==1){\n\t\t\t\tinput.value += currentStimulus.trialType + \"T\" + currentStimulus.index + \"X\" + currentStimulus.reactionTime + \",\";\t\/\/ score as error if we had to correct\n            countTotal++;\n\t\t\t}\n\n         if (currentStimulus.reactionTime>=tooSlowMessageMS) {\n            statusMessage.innerHTML = \"too slow\";\n\t\t\t   \/\/ error.innerHTML = \"too slow\";\n            setTimeout(function() {statusMessage.innerHTML=\"\";}, tooSlowMessageShowTimeMS);\n         }\n\t\t\t\/\/ message.innerHTML = \"<br><br><br>+\";\n\t\t\tfix=0;\n\t\t\tcurrentStimulus = null;\n\t\t\terror.innerHTML = \"\";\n\t\t\treturn setTimeout(function() {return nextQuestion(); }, interQuestionDelay);\n\t\n\t\t} else {\n\t\t\terror.innerHTML = \"X\";\n\t\t\tfix=1;\n\t\t\treturn;\n\t\t}\n\t};\n\n\n\t\/\/FUNCTION 6 - TAKES CONTENTS FROM A STIMULI POOL AND PLACES INTO STIMULI OBJECT\n\tfunction stimBuilder(destination, array, category, correct, trialType){\n      for(i=0;i<array.length;i++) {\n         stimuli.push({stimulus: array[i].stimulus, \n                          index: array[i].index,\n                          correct: correct, \n                          category: category,\n                          trialType: trialType\n         });\n\t\t}\n\t}\n\n\t\n\t\/\/FUNCTION 7 - FOR COMBINED BLOCKS WITH ALTERNATING FORMAT ONLY\n\t\/* For combined blocks with an alternating form, this function is used to transfer stimuli from \n\tintermediary pools (cats and tgts) into the final stimuli object in an alternating format *\/\n\tfunction altStimuil(){\n\t\t\n\t\t\/\/CREATE INDICES OF ALTERNATING NUMBERS TO USE FOR TGT AND CAT TRIALS\n\t\tvar j = 0;\n\t\tfor(var i = 1; i < stimuli.length; i += 2) { \n\t\t\ttgtnum[j] = i; \/\/ starts at 1\n\t\t\tcatnum[j] = (i-1); \/\/ starts at 0\n\t\t\tj++; \/\/ represents position in tgt\/cat number array\n\t\t}\n\t\n\t\t\/\/ FOR ALL TARGETS, MOVE CONTENTS FROM TARGET INTO STIMULI USING TGTNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < tgts.length; i++){\n\t\t\tvar alternating = tgtnum[i];\n\t\t\tstimuli[alternating].stimulus = tgts[i].stimulus;\n\t\t\tstimuli[alternating].correct = tgts[i].correct;\n\t\t\tstimuli[alternating].index = tgts[i].index;\n\t\t}\n\t\t\n\t\t\/\/ FOR ALL CATEGORIES, MOVE CONTENTS FROM TARGET INTO STIMULI USING CATNUM TO INDEX TRIALS\n\t\tfor (var i = 0; i < cats.length; i++){\n\t\t\tvar alternating = catnum[i];\n\t\t\tstimuli[alternating].stimulus = cats[i].stimulus;\n\t\t\tstimuli[alternating].correct = cats[i].correct;\n\t\t\tstimuli[alternating].index = cats[i].index;\n\t\t}\n\t}\n\n   \/\/ After this define data and start\n   \/\/ Astim = \n   \/\/ Bstim = \n   \/\/ image_srcs =\n   \/\/ initParams = \n   \/\/ setInitParams\n\t\n\n\t\/\/  IAT CONTENTS \n\t\n\t\/\/IMAGE URLS\n\t\/* Consists of all pos, neg, A, and B images (in that order). *\/\n image_srcs = [];\n\n\n\n\t\/\/ THIS IS WHAT STARTS THE IAT\n\t\/* This line of code triggers the IAT by running the first function. Note that the code skips image loading if image_srcs \n\tis empty. Note that this must come before stimuli in order that images[] references are defined.  *\/\n\timages = loadImages(image_srcs);\n\n\t\/\/ STIMULI POOLS\ninitParams ={\"forceErrorCorrection\":1,\"interQuestionDelay\":250,\"stimuliShowCount\":0,\"leftKeyChar\":\"D\",\"rightKeyChar\":\"K\",\"tooSlowMessageMS\":4000,\"tooSlowMessageShowTimeMS\":600,\"practiceSuccessThreasholdCorrect\":0.8,\"practiceSuccessThreasholdMedianMS\":4000,\"showPracticeStats\":false,\"reverseAnswers\":1,\"practiceMode\":0};\nposstim =[{\"stimulus\":\"<b style='color:green'>Good<\\\/b>\",\"correct\":\"NA\",\"index\":1}];\nnegstim =[{\"stimulus\":\"<b style='color:green'>Bad<\\\/b>\",\"correct\":\"NA\",\"index\":2}];\nAstim =[{\"stimulus\":\"<b style='color:black'>Excited<\\\/b>\",\"correct\":\"69\",\"index\":3},{\"stimulus\":\"<b style='color:black'>Happy<\\\/b>\",\"correct\":\"69\",\"index\":4},{\"stimulus\":\"<b style='color:black'>Hopeful<\\\/b>\",\"correct\":\"69\",\"index\":5},{\"stimulus\":\"<b style='color:black'>Love<\\\/b>\",\"correct\":\"69\",\"index\":6},{\"stimulus\":\"<b style='color:black'>Surprised<\\\/b>\",\"correct\":\"69\",\"index\":7},{\"stimulus\":\"<b style='color:black'>Trust<\\\/b>\",\"correct\":\"69\",\"index\":8}];\nBstim =[{\"stimulus\":\"<b style='color:black'>Afraid<\\\/b>\",\"correct\":\"73\",\"index\":9},{\"stimulus\":\"<b style='color:black'>Angry<\\\/b>\",\"correct\":\"73\",\"index\":10},{\"stimulus\":\"<b style='color:black'>Hurt<\\\/b>\",\"correct\":\"73\",\"index\":11},{\"stimulus\":\"<b style='color:black'>Sad<\\\/b>\",\"correct\":\"73\",\"index\":12},{\"stimulus\":\"<b style='color:black'>Sorry<\\\/b>\",\"correct\":\"73\",\"index\":13},{\"stimulus\":\"<b style='color:black'>Upset<\\\/b>\",\"correct\":\"73\",\"index\":14}];\n\n\nsetInitParams();\n\n});\n","QuestionText_Unsafe":"<style>\n\ndiv.border {\n    position: absolute;\n    width: 700px;\n    height: 500px;\n    border: 3px solid black;\n}\n\ndiv.labright {\n    position: absolute;\n    top: 1%;\n    right: 1%;\n    font-size: 30px;\n    font-weight: bold;\n    text-align: center;\n    font-family: arial;\n}\n\ndiv.lableft {\n    position: absolute;\n    top: 1%;\n    left: 1%;\n    text-align: center;\n    font-size: 30px;\n    font-weight: bold;\n    font-family: arial;   \n}\n\ndiv.load {\n    position: absolute;\n    top: 55%;\n    width: 100%;\n    display: block;\n    text-align: center;\n    font-size: 16px;\n    font-weight: normal;\n    font-family: \"Times New Roman\";   \n}\n\ndiv.instruct {\n    position: absolute;\n    text-align: center;\n    bottom: 0%;\n    font-size: 16px; \n    font-family: \"Times New Roman\";\n    display: none;\n    padding-top: 10px; \n    padding-right: 10px;\n    padding-bottom: 10px; \n    padding-left: 10px;\n}\n\nh2.center {\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    top: 29%;\n    font-size: 30px; \n    font-weight: bold;\n    font-family: arial;\n}\n\np.note {\n    position: absolute;\n    text-align: center;\n    bottom: 1%;\n    font-size: 16px; \n    width: 100%;\n    line-height: 100%;\n    font-family: \"Times New Roman\";\n}\n\nh2.err {\n    position: absolute;\n    display: block;\n    text-align: center;\n    width: 100%;\n    line-height: 100%;\n    bottom: 8%;\n    font-size: 80px; \n    font-weight: bold;\n    font-family: arial;\n    color: red;\n}\n\n<\/style>\n\n<div class=\"border\">\n\n\n<div class=\"lableft\">\n <div style=\"color: black;\">Flowers<\/div>\n<\/div>\n\n\n<div class=\"labright\">\n <div style=\"color: black;\">Insects<\/div>\n<\/div>\n\n\n<h2 class=\"center\" id=\"message\"><br><br><br>+<\/h2>\n<h2 class=\"err\" id=\"error\"><\/h2>\n\n<div class=\"load\">\n<p id=\"loading\">Loading all the content...\n<br>\n<br>\nThis should take less than 1 minute<\/p>\n<\/div>\n\n<div class=\"instruct\" id=\"instructions\">\n<p>Instructions: Place your left and right index fingers on the <span style=\"font-weight: strong\">E<\/span> and <span style=\"font-weight: strong\">I<\/span> keys. At the top of the screen are 2 categories. In the task, words and\/or images appear in the middle of the screen. <br><br>When the word\/image belongs to the category on the left, press the <span style=\"font-weight: bold\">E<\/span> key as fast as you can. When it belongs to the category on the right, press the <span style=\"font-weight: bold\">I<\/span> key as fast as you can. If you make an error, a red <span style=\"font-weight: bold; color: red\">X<\/span> will appear. Correct errors by hitting the other key.\n<br>\n<br>\nPlease try to go as <em>fast as you can<\/em> while making as few errors as possible.\n<br>\n<br>\nWhen you are ready, please press the [Space] bar to begin.\n<br>\n<br>\nPart 1 of 7<\/p>\n<\/div>\n<p class=\"note\" id=\"note\"><\/p>\n<\/div>\n\n<div style=\"opacity: 0; font-size:300px\"><p>x<\/p><\/div>\n"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID35","SecondaryAttribute":"Thank you for completing this task! \u00a0Your answers and hard work have been recorded.","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11.5pt; line-height: 107%; font-family: Helvetica, sans-serif; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial;\">Thank you for completing this task!\n&nbsp;Your answers and hard work have been recorded.<\/span><o:p><\/o:p><\/p>","DefaultChoices":false,"DataExportTag":"Q100","QuestionType":"DB","Selector":"TB","QuestionDescription":"Thank you for completing this task! \u00a0Your answers and hard work have been recorded.","QuestionID":"QID35"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID30","SecondaryAttribute":"Thank you for completing this task!\u00a0 We know it\u2019s a lot of work to try and figure out these rules","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11.5pt;\">Thank you\nfor completing this task!&nbsp; We know it\u2019s a\nlot of work to try and figure out these rules!!<\/span><\/p><p>\n\n\n\n<\/p><p><span style=\"font-size:11.5pt;line-height:107%\"><br><\/span><\/p><p><span style=\"font-size:11.5pt;line-height:107%\">You're\nanswers and hard work have been recorded and will tell us A LOT about the\nthinking health of people your age!<o:p><\/o:p><\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q99","QuestionType":"DB","Selector":"TB","QuestionDescription":"Thank you for completing this task!\u00a0 We know it\u2019s a lot of work to try and figure out these rules...","QuestionID":"QID30"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID31","SecondaryAttribute":"The survey software has detected that you are attempting to take this survey from an incompatible...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText","InputWidth":580,"InputHeight":29},"Validation":{"Settings":{"ForceResponse":"OFF","ForceResponseType":"ON"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":[],"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"The survey software has detected that you are attempting to take this survey from an incompatible device. The survey contains questions that will only function correctly on a computer with a keyboard. Please open this survey from a computer with a keyboard.","DefaultChoices":false,"DataExportTag":"Q101","QuestionType":"TE","Selector":"FORM","QuestionDescription":"The survey software has detected that you are attempting to take this survey from an incompatible...","QuestionID":"QID31"}},{"SurveyID":"SV_0kSvIzCASyqxsq1","Element":"SQ","PrimaryAttribute":"QID29","SecondaryAttribute":"This task is very different from doing a questionnaire. Instead of asking you questions about wha...","TertiaryAttribute":null,"Payload":{"0":{"BlockElements":null},"1":{"BlockElements":null},"4":{"BlockElements":null},"5":{"BlockElements":null},"6":{"BlockElements":null},"7":{"BlockElements":null},"8":{"BlockElements":null},"9":{"BlockElements":null},"10":{"BlockElements":null},"Flow":null,"Properties":[],"CustomStyles":{"errorStyles":{"styles":[]},"errorStylesBG":{"styles":[]},"pageStyles":{"styles":[]},"textStyles":{"styles":[]},"questionStyles":{"styles":[]},"choiceStyles":{"styles":[]},"headerStyles":{"styles":[]},"footerStyles":{"styles":[]},"questionSeparatorStyles":{"styles":[]},"highlightStyles":{"styles":[]},"highlightStylesAlt":{"styles":[]},"textEntryStyles":{"styles":[]},"borderStyles":{"styles":[]},"altRowStyles":{"styles":[]}},"AvailableLanguages":{"EN":null},"ScoringCategories":null,"ScoringCategoryGroups":null,"Features":null,"Configuration":{"QuestionDescriptionOption":"UseText"},"Validation":{"Settings":{"Type":"None"}},"GradingData":[],"Language":[],"ChoiceOrder":[],"Choices":null,"11":{"BlockElements":null},"12":{"BlockElements":null},"13":{"BlockElements":null},"14":{"BlockElements":null},"15":{"BlockElements":null},"16":{"BlockElements":null},"QuestionText":"<p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">This task\nis very different from doing a questionnaire. Instead of asking you questions\nabout what you think or feel, this task asks you to follow some rules. Then, it\ntests how easy or hard it is for you to follow those rules.<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\"><o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">&nbsp;<o:p><\/o:p><\/span><\/p><p><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">On each\nscreen, you will see either \"<\/span><strong><span style=\"font-size:11.5pt;\nfont-family:&quot;Helvetica&quot;,sans-serif;color:green\">Good<\/span><\/strong><span style=\"font-size:11.5pt;font-family:&quot;Helvetica&quot;,sans-serif;color:green\">\"<\/span><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;or&nbsp;<\/span><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">\"<\/span><strong><span style=\"font-size:11.5pt;font-family:&quot;Helvetica&quot;,sans-serif;color:green\">Bad<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">\"<\/span><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">&nbsp;at\nthe top of the screen, and either a positive or negative emotion, such as \u201c<\/span><strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">Happy<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">\u201d or \u201c<\/span><strong><span style=\"font-size: 11.5pt; font-family: Helvetica, sans-serif;\">Afraid<\/span><\/strong><span style=\"font-size: 11.5pt; font-family: Arial, sans-serif;\">\u201d, in the\nmiddle of the screen.<\/span><\/p><p><span style=\"font-size: 11.5pt; line-height: 107%; font-family: Helvetica, sans-serif;\">\n<br>\n<\/span><\/p>","DefaultChoices":false,"DataExportTag":"Q0","QuestionType":"DB","Selector":"TB","QuestionDescription":"This task is very different from doing a questionnaire. Instead of asking you questions about wha...","QuestionID":"QID29"}}]}